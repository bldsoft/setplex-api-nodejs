{"version":3,"file":"index.cjs","sources":["../../src/resource/subscriptions.ts","../../src/resource/payments.ts","../../src/configure/index.ts","../../src/resource/subscribers.ts","../../src/client/index.ts","../../src/errors/nora-api.error.ts","../../src/resource/payment-systems.ts","../../src/resource/payment-methods.ts","../../src/resource/dictionaries.ts","../../src/resource/content-rent.ts","../../src/resource/index.ts","../../src/resource/types/constants.ts"],"sourcesContent":["import type { AxiosRequestConfig } from 'axios';\nimport type { ContextAPI } from './types';\nimport type {\n  NoraAPIGetSubscriptionsPlansRequest,\n  NoraAPIGetSubscriptionsPlansResponse,\n  NoraAPIGetSubscriptionsRequest,\n  NoraAPIGetSubscriptionsResponse,\n} from './types/subscriptions.types';\n\nexport class SubscriptionsAPI {\n  readonly path = '/subscriptions';\n  readonly context: ContextAPI;\n\n  constructor(ctx: ContextAPI) {\n    this.context = ctx;\n  }\n\n  /**\n   * Get info about available subscriptions\n   * @param data SubscriptionsAPIGetRequest\n   * @param config AxiosConfig\n   * @returns List of available subscriptions\n   */\n  get(data?: NoraAPIGetSubscriptionsRequest, config?: AxiosRequestConfig): Promise<NoraAPIGetSubscriptionsResponse> {\n    return this.context.post<NoraAPIGetSubscriptionsResponse, NoraAPIGetSubscriptionsRequest>(\n      `${this.path}/get`,\n      data || {},\n      config\n    );\n  }\n\n  /**\n   * Get all available subscriptions with addons combined by subscription plans.\n   * @param data\n   * @param config\n   */\n  getPlans(\n    data?: NoraAPIGetSubscriptionsPlansRequest,\n    config?: AxiosRequestConfig\n  ): Promise<NoraAPIGetSubscriptionsPlansResponse> {\n    return this.context.post<NoraAPIGetSubscriptionsPlansResponse, NoraAPIGetSubscriptionsPlansRequest>(\n      `${this.path}/plans/get`,\n      data || {},\n      config\n    );\n  }\n}\n","import type {\n  PaymentsAPIDoRequest,\n  PaymentsAPIDoResponse,\n  PaymentsAPIDoSingleRequest,\n  PaymentsAPIDoSingleResponse,\n  PaymentsAPICalculateRequest,\n  PaymentsAPICalculateResponse,\n  PaymentsAPICalculateContentSetsRequest,\n  PaymentsAPICalculateContentSetsResponse,\n  PaymentsAPIPayContentSetsRequest,\n  PaymentsAPIPayContentSetsResponse,\n  PaymentsAPICalculateAdditionsRequest,\n  PaymentsAPIPayAdditionsRequest,\n  PaymentsAPIPayAdditionsResponse, PaymentsAPICalculateAdditionsResponse,\n} from './types/payments.types';\nimport type { AxiosRequestConfig } from 'axios';\nimport type { ContextAPI } from './types';\n\nexport class PaymentsAPI {\n  readonly path = '/payments';\n  readonly context: ContextAPI;\n\n  constructor(ctx: ContextAPI) {\n    this.context = ctx;\n  }\n  /**\n   * Creating payment for subscriber\n   * @param data Payment data\n   * @param config AxiosConfiguration\n   */\n  payReSubscription(data: PaymentsAPIDoRequest, config?: AxiosRequestConfig): Promise<PaymentsAPIDoResponse> {\n    return this.context.post<PaymentsAPIDoResponse, PaymentsAPIDoRequest>(`${this.path}/do`, data, config);\n  }\n\n  /**\n   * Creating subscriber, credit card and make payment for subscriber\n   * @param data Full data about subscriber, credit card and payment\n   * @param config AxiosConfiguration\n   */\n  paySubscription(data: PaymentsAPIDoSingleRequest, config?: AxiosRequestConfig): Promise<PaymentsAPIDoSingleResponse> {\n    return this.context.post<PaymentsAPIDoSingleResponse, PaymentsAPIDoSingleRequest>(\n      `${this.path}/doSingle`,\n      data,\n      config\n    );\n  }\n\n  /**\n   * Calculates amount of subscriber's payment\n   * @param data Required info for calculation\n   * @param config AxiosConfiguration\n   * @returns Calculation for needed subscription\n   */\n  calculate(data: PaymentsAPICalculateRequest, config?: AxiosRequestConfig): Promise<PaymentsAPICalculateResponse> {\n    return this.context.post<PaymentsAPICalculateResponse, PaymentsAPICalculateRequest>(\n      `${this.path}/calculate`,\n      data,\n      config\n    );\n  }\n\n  /**\n   * Calculate Content Set Addon Prices\n   * @param data Required info for calculation\n   * @param config AxiosConfiguration\n   * @returns Calculation for needed subscription\n   */\n  calculateContentSets(\n    data: PaymentsAPICalculateContentSetsRequest,\n    config?: AxiosRequestConfig\n  ): Promise<PaymentsAPICalculateContentSetsResponse> {\n    return this.context.post<PaymentsAPICalculateContentSetsResponse, PaymentsAPICalculateContentSetsRequest>(\n      `${this.path}/content-sets/calculate`,\n      data,\n      config\n    );\n  }\n\n  /**\n   * Pay Content Set Addons\n   * @param data Required info for calculation\n   * @param config AxiosConfiguration\n   * @returns Calculation for needed subscription\n   */\n  payContentSets(\n    data: PaymentsAPIPayContentSetsRequest,\n    config?: AxiosRequestConfig\n  ): Promise<PaymentsAPIPayContentSetsResponse> {\n    return this.context.post<PaymentsAPIPayContentSetsResponse, PaymentsAPIPayContentSetsRequest>(\n      `${this.path}/content-sets/do`,\n      data,\n      config\n    );\n  }\n\n  /**\n   * Pay Additions\n   * @param data Payment data\n   * @param config AxiosConfiguration\n   */\n  payAdditions(\n    data: PaymentsAPIPayAdditionsRequest,\n    config?: AxiosRequestConfig\n  ) {\n    return this.context.post<PaymentsAPIPayAdditionsResponse, PaymentsAPIPayAdditionsRequest>(\n      `${this.path}/additions/do`,\n      data,\n      config\n    );\n  }\n\n  /**\n   * Calculate additions\n   * @param data Required info for calculation\n   * @param config AxiosConfiguration\n   */\n  calculateAdditions(\n    data: PaymentsAPICalculateAdditionsRequest,\n    config?: AxiosRequestConfig\n  ) {\n    return this.context.post<PaymentsAPICalculateAdditionsResponse, PaymentsAPICalculateAdditionsRequest>(\n      `${this.path}/additions/calculate`,\n      data,\n      config\n    );\n  }\n}\n","// import { version } from '../../package.json';\nconst version = '0.0.1';\nexport const userAgent =\n  'Setplex/External-API-node-SDK ' + version + ' (node ' + process.version + '-' + process.arch + ')';\n\nexport const defaultOptions = {\n  mode: process.env.SETPLEX_API_MODE || '', // ?\n  baseURL: process.env.SETPLEX_API_BASE_URL || '',\n  token: process.env.SETPLEX_API_TOKEN || '',\n  login: process.env.SETPLEX_API_LOGIN || '',\n  headers: {\n    'User-Agent': userAgent,\n  },\n};\n","import type {\n  NoraAPIGetSubscriberByEmailRequest,\n  NoraAPIGetSubscriberByEmailResponse,\n  NoraAPIGetSubscriberInfoRequest,\n  NoraAPIGetSubscriberRequest,\n  NoraAPIGetSubscriberResponse,\n  NoraApiSubscriberAutoPaySubscriptionRequest,\n  NoraApiSubscriberAutoPaySubscriptionResponse,\n  NoraApiSubscriberCancelSubscriptionRequest,\n  NoraApiSubscriberCancelSubscriptionResponse,\n  NoraApiSubscriberSubscriptionContentSetsRequest,\n  NoraApiSubscriberSubscriptionContentSetsResponse,\n  NoraApiSubscriberSubscriptionGetRequest,\n  NoraApiSubscriberSubscriptionGetResponse,\n  NoraApiSubscriberSubscriptionPartnersProductsRequest,\n  NoraApiSubscriberSubscriptionPartnersProductsResponse,\n  NoraApiSubscriberValidateUsernameRequest,\n  NoraApiSubscriberValidateUsernameResponse,\n  NoraApiSusbscriberUnassignDeviceRequest,\n  NoraApiSusbscriberUnassignDeviceResponse,\n  NoraAPIUpdateSubscriberInfoRequest,\n  NoraAPIUpdateSubscriberResponse,\n} from './types/subscribers.types';\nimport type { AxiosRequestConfig } from 'axios';\nimport type { ContextAPI } from './types';\n\nexport class SubscribersAPI {\n  readonly path = '/subscribers';\n  readonly context: ContextAPI;\n\n  constructor(ctx: ContextAPI) {\n    this.context = ctx;\n  }\n\n  /**\n   * Get subscriber by accountNumber and last name\n   * @param data Subscriber auth info\n   * @param config AxiosConfig\n   * @returns Subscriber detail info\n   */\n  get(data: NoraAPIGetSubscriberRequest, config?: AxiosRequestConfig): Promise<NoraAPIGetSubscriberResponse> {\n    return this.context.post<NoraAPIGetSubscriberResponse, NoraAPIGetSubscriberRequest>(\n      `${this.path}/get`,\n      data,\n      config\n    );\n  }\n\n  /**\n   * Get subscribers by email\n   * @param data Subscriber email\n   * @param config AxiosConfig\n   * @returns Subscribers detail info\n   */\n  getByEmail(\n    data: NoraAPIGetSubscriberByEmailRequest,\n    config?: AxiosRequestConfig\n  ): Promise<NoraAPIGetSubscriberByEmailResponse> {\n    return this.context.post<NoraAPIGetSubscriberByEmailResponse, NoraAPIGetSubscriberByEmailRequest>(\n      `${this.path}/search`,\n      data,\n      config\n    );\n  }\n\n  /**\n   * Get subscriber by login and password\n   * @param data Subscriber data info\n   * @param config AxiosConfig\n   * @returns Subscriber detail info\n   */\n  info(data: NoraAPIGetSubscriberInfoRequest, config?: AxiosRequestConfig): Promise<NoraAPIGetSubscriberResponse> {\n    return this.context.post<NoraAPIGetSubscriberResponse, NoraAPIGetSubscriberInfoRequest>(\n      `${this.path}/info`,\n      data,\n      config\n    );\n  }\n\n  /**\n   * Update Subscriber\n   * @description This call will update subscriber\n   * @param data Subscriber data info\n   * @param config AxiosConfig\n   * @returns Subscriber detail info\n   */\n  update(\n    data: NoraAPIUpdateSubscriberInfoRequest,\n    config?: AxiosRequestConfig\n  ): Promise<NoraAPIUpdateSubscriberResponse> {\n    return this.context.post<NoraAPIUpdateSubscriberResponse, NoraAPIUpdateSubscriberInfoRequest>(\n      `${this.path}/update`,\n      data,\n      config\n    );\n  }\n\n  /**\n   * Loading subscriber subscription content sets\n   * @param config AxiosConfig\n   * @returns Subscription content sets info\n   */\n  getSubscriptionContentSets(\n    data: NoraApiSubscriberSubscriptionContentSetsRequest,\n    config?: AxiosRequestConfig\n  ): Promise<NoraApiSubscriberSubscriptionContentSetsResponse> {\n    return this.context.post<\n      NoraApiSubscriberSubscriptionContentSetsResponse,\n      NoraApiSubscriberSubscriptionContentSetsRequest\n    >(`${this.path}/subscription/content-sets/get`, data, config);\n  }\n\n  /**\n   * Loading subscriber subscription info\n   * @param config AxiosConfig\n   * @param data body request data\n   * @returns Subscription content sets info\n   */\n  getSubscription(\n    data: NoraApiSubscriberSubscriptionGetRequest,\n    config?: AxiosRequestConfig\n  ): Promise<NoraApiSubscriberSubscriptionGetResponse> {\n    return this.context.post<NoraApiSubscriberSubscriptionGetResponse, NoraApiSubscriberSubscriptionGetRequest>(\n      `${this.path}/subscription/get`,\n      data,\n      config\n    );\n  }\n\n  /**\n   * Unassign device call\n   * @param data auth data\n   * @param deviceSerialNumber Device serial number\n   * @param config axios config\n   */\n  unassignDevice(\n    data: NoraApiSusbscriberUnassignDeviceRequest,\n    deviceSerialNumber: string,\n    config?: AxiosRequestConfig\n  ): Promise<NoraApiSusbscriberUnassignDeviceResponse> {\n    return this.context.post<NoraApiSusbscriberUnassignDeviceResponse, NoraApiSusbscriberUnassignDeviceRequest>(\n      `${this.path}/devices/${deviceSerialNumber}/unassign`,\n      data,\n      config\n    );\n  }\n\n  /**\n   * This call cancels the current subscriber’s subscription. Subscriber should have only one active subscription.\n   * @param data auth data\n   * @param config axios config\n   * @returns\n   */\n  cancelSubscription(\n    data: NoraApiSubscriberCancelSubscriptionRequest,\n    config?: AxiosRequestConfig\n  ): Promise<NoraApiSubscriberCancelSubscriptionResponse> {\n    return this.context.post<NoraApiSubscriberCancelSubscriptionResponse, NoraApiSubscriberCancelSubscriptionRequest>(\n      `${this.path}/subscription/cancel`,\n      data,\n      config\n    );\n  }\n\n  /**\n   * This call updates (increase or decrease) current subscriber’s subscription. Subscriber should have only one active subscription.\n   * @param data autopay & auth data\n   * @param config axios config\n   */\n  autoPaySubscription(\n    data: NoraApiSubscriberAutoPaySubscriptionRequest,\n    config?: AxiosRequestConfig\n  ): Promise<NoraApiSubscriberAutoPaySubscriptionResponse> {\n    return this.context.post<NoraApiSubscriberAutoPaySubscriptionResponse, NoraApiSubscriberAutoPaySubscriptionRequest>(\n      `${this.path}/subscription/autopay`,\n      data,\n      config\n    );\n  }\n\n  /**\n   * Loading subscriber subscription available partner products\n   * @param data\n   * @param config AxiosConfig\n   * @returns Subscription partners products info\n   */\n  getSubscriptionPartnerProducts(\n    data: NoraApiSubscriberSubscriptionPartnersProductsRequest,\n    config?: AxiosRequestConfig\n  ): Promise<NoraApiSubscriberSubscriptionPartnersProductsResponse> {\n    return this.context.post<\n      NoraApiSubscriberSubscriptionPartnersProductsResponse,\n      NoraApiSubscriberSubscriptionPartnersProductsRequest\n    >(`${this.path}/subscription/partner-products/get`, data, config);\n  }\n\n  /**\n   * Validates uniqueness username\n   * @param userName string\n   * @returns\n   */\n  validateUsername(\n    data: NoraApiSubscriberValidateUsernameRequest,\n    config?: AxiosRequestConfig\n  ): Promise<NoraApiSubscriberValidateUsernameResponse> {\n    return this.context.post<NoraApiSubscriberValidateUsernameResponse, NoraApiSubscriberValidateUsernameRequest>(\n      `${this.path}/validate/username`,\n      data,\n      config\n    );\n  }\n}\n","import axios from 'axios';\nimport * as configuration from './../configure';\n\nconst {\n  defaultOptions: { headers },\n} = configuration;\n\nexport const client = axios.create({\n  headers: {\n    ...headers,\n  },\n});\n","import { AxiosError } from 'axios';\n\nexport class NoraApiError extends Error {\n  response = {\n    status: 0,\n  };\n\n  constructor(message: any) {\n    if (Object.prototype.hasOwnProperty.call(message, 'name')) message.name = '';\n\n    super(message);\n\n    // this.name = this.constructor.name;\n    this.name = 'NoraApiError';\n\n    if (message instanceof AxiosError) {\n      const { response } = message;\n      if (response) {\n        this.response.status = response.status;\n      }\n    }\n\n    Error.captureStackTrace(this, this.constructor);\n  }\n}\n","import type { ContextAPI } from './types';\nimport type { AxiosRequestConfig } from 'axios';\nimport type {\n  NoraAPIAvailablePaymentSystemsRequest,\n  NoraAPIAvailablePaymentSystemsResponse,\n  NoraAPIPaymentSystemsAddFlowRequest,\n  NoraAPIPaymentSystemsAddFlowResponse,\n  NoraAPIPaymentSystemsCheckResultRequest,\n  NoraAPIPaymentSystemsCheckResultResponse,\n  NoraAPIPaymentSystemsOptionsRequest,\n  NoraAPIPaymentSystemsOptionsResponse,\n} from './types/payment-systems.types';\n\nexport class PaymentSystemsAPI {\n  readonly path = '/payment-form';\n  readonly context: ContextAPI;\n\n  constructor(ctx: ContextAPI) {\n    this.context = ctx;\n  }\n\n  /**\n   * Get available payment systems\n   * @description Retrieves available payment system types for displaying payment form.\n   * If first element in response result is GR4VY_GATEWAY - other payment systems types have to be ignored and payment\n   * flow for GR4VY_GATEWAY have to be used.\n   * @param data Full data about subscriber, credit card and payment\n   * @param config AxiosConfiguration\n   */\n  getAvailable(\n    data?: NoraAPIAvailablePaymentSystemsRequest,\n    config?: AxiosRequestConfig\n  ): Promise<NoraAPIAvailablePaymentSystemsResponse> {\n    return this.context.post<NoraAPIAvailablePaymentSystemsResponse, NoraAPIAvailablePaymentSystemsRequest>(\n      `${this.path}/payment-systems`,\n      data,\n      config\n    );\n  }\n\n  /**\n   * Get payment system options\n   * @description Retrieves payment form options (currently is used for GR4VY_GATEWAY payment system flow)\n   * @param data Full data about subscriber, credit card and payment\n   * @param config AxiosConfiguration\n   */\n  getOptions(\n    data?: NoraAPIPaymentSystemsOptionsRequest,\n    config?: AxiosRequestConfig\n  ): Promise<NoraAPIPaymentSystemsOptionsResponse> {\n    return this.context.post<NoraAPIPaymentSystemsOptionsResponse, NoraAPIPaymentSystemsOptionsRequest>(\n      `${this.path}/options`,\n      data,\n      config\n    );\n  }\n\n  /**\n   * Get payment form options to add payment method for Gr4vy gateway\n   * @param data Full data about subscriber, credit card and payment\n   * @param config AxiosConfiguration\n   */\n  addFlow(\n    data?: NoraAPIPaymentSystemsAddFlowRequest,\n    config?: AxiosRequestConfig\n  ): Promise<NoraAPIPaymentSystemsAddFlowResponse> {\n    return this.context.post<NoraAPIPaymentSystemsAddFlowResponse, NoraAPIPaymentSystemsAddFlowRequest>(\n      `${this.path}/options/add-flow`,\n      data,\n      config\n    );\n  }\n\n  /**\n   * Check result by payment number. Used for 2C2P Payments\n   * @param data Full data about subscriber, invoice number from 2C2P\n   * @param config AxiosConfiguration\n   */\n  checkResult(\n    data?: NoraAPIPaymentSystemsCheckResultRequest,\n    config?: AxiosRequestConfig\n  ): Promise<NoraAPIPaymentSystemsCheckResultResponse> {\n    return this.context.post<NoraAPIPaymentSystemsCheckResultResponse, NoraAPIPaymentSystemsCheckResultRequest>(\n      `${this.path}/check`,\n      data,\n      config\n    );\n  }\n}\n","import type { AxiosRequestConfig } from 'axios';\nimport type { ContextAPI } from './types';\nimport type {\n  NoraApiCreateCreditCardsRequest,\n  NoraApiCreateCreditCardsResponse,\n  NoraApiDeleteCreditCardRequest,\n  NoraApiSetDefaultCreditCardRequest,\n  NoraApiSetDefaultCreditCardResponse,\n  NoraApiGetPaymentMethodResponse,\n  NoraApiGetPaymentMethodReuqest,\n  NoraApiSetDefaultWalletRequest,\n  NoraApiSetDefaultWalletResponse,\n  NoraApiDeleteWalletRequest,\n  NoraApiDeleteWalletResponse,\n  NoraApiDeleteCreditCardResponse,\n  NoraApiAddPaymentMethodRequest,\n  NoraApiAddPaymentMethodResponse,\n  NoraApiInitTrueMoneyRequest,\n  NoraApiInitTrueMoneyResponse,\n  NoraApiBindTrueMoneyRequest,\n  NoraApiBindTrueMoneyResponse,\n} from './types/payment-method.types';\n\nexport class PaymentMethodsAPI {\n  readonly path = '/payment-method';\n  readonly context: ContextAPI;\n\n  constructor(ctx: ContextAPI) {\n    this.context = ctx;\n  }\n\n  /**\n   * Get saved tokenized payment methods for subscriber\n   * @param data\n   * @param config\n   */\n  get(data: NoraApiGetPaymentMethodReuqest, config?: AxiosRequestConfig): Promise<NoraApiGetPaymentMethodResponse> {\n    return this.context.post<NoraApiGetPaymentMethodResponse, NoraApiGetPaymentMethodReuqest>(\n      `${this.path}/get`,\n      data,\n      config\n    );\n  }\n\n  /**\n   * Add tokenized payment method\n   * @param data tokenized wallet data\n   * @param config axios config\n   * @returns\n   */\n  add(data: NoraApiAddPaymentMethodRequest, config?: AxiosRequestConfig): Promise<NoraApiAddPaymentMethodResponse> {\n    return this.context.post<NoraApiAddPaymentMethodResponse, NoraApiAddPaymentMethodRequest>(\n      `${this.path}/add`,\n      data,\n      config\n    );\n  }\n\n  /**\n   * Set tokenized wallet as default payment method for auto payments\n   * @param data auth data\n   * @param walletId walletId\n   * @param config axios config\n   * @returns\n   */\n  setDefaultWallet(\n    data: NoraApiSetDefaultWalletRequest,\n    walletId: number,\n    config?: AxiosRequestConfig\n  ): Promise<NoraApiSetDefaultWalletResponse> {\n    return this.context.post<NoraApiSetDefaultWalletResponse, NoraApiSetDefaultWalletRequest>(\n      `${this.path}/wallet/${walletId}/default`,\n      data,\n      config\n    );\n  }\n\n  /**\n   * Delete subscriber’s stored wallet\n   * @param data auth data\n   * @param creditCardId wallet Id\n   * @param config AxiosConfiguration\n   */\n  deleteWallet(\n    data: NoraApiDeleteWalletRequest,\n    walletId: number,\n    config?: AxiosRequestConfig\n  ): Promise<NoraApiDeleteWalletResponse> {\n    return this.context.post<NoraApiDeleteWalletResponse, NoraApiDeleteWalletRequest>(\n      `${this.path}/wallet/${walletId}/delete`,\n      data,\n      config\n    );\n  }\n\n  /**\n   * This call creates new credit card for Subscriber with given accountNumber and lastName.\n   * @param data Credit card info\n   * @param config AxiosConfiguration\n   * @returns Created credit card Id\n   */\n  createCreditCard(\n    data: NoraApiCreateCreditCardsRequest,\n    config?: AxiosRequestConfig\n  ): Promise<NoraApiCreateCreditCardsResponse> {\n    return this.context.post<NoraApiCreateCreditCardsResponse, NoraApiCreateCreditCardsRequest>(\n      `/creditcards/create`,\n      data,\n      config\n    );\n  }\n\n  /**\n   * Set credit card as default payment method for auto payments\n   * @param data Auth info\n   * @param creditCardId creditCardId\n   * @param config AxiosConfiguration\n   */\n  setDefaultCreditCard(\n    data: NoraApiSetDefaultCreditCardRequest,\n    creditCardId: number,\n    config?: AxiosRequestConfig\n  ): Promise<NoraApiSetDefaultCreditCardResponse> {\n    return this.context.post<NoraApiSetDefaultCreditCardResponse, NoraApiSetDefaultCreditCardRequest>(\n      `${this.path}/creditcard/${creditCardId}/default`,\n      data,\n      config\n    );\n  }\n\n  /**\n   * Delete subscriber’s stored credit card\n   * @param data auth data\n   * @param creditCardId credit card Id\n   * @param config AxiosConfiguration\n   */\n  deleteCreditCard(\n    data: NoraApiDeleteCreditCardRequest,\n    creditCardId: number,\n    config?: AxiosRequestConfig\n  ): Promise<NoraApiDeleteCreditCardResponse> {\n    return this.context.post<NoraApiDeleteCreditCardResponse, NoraApiDeleteCreditCardRequest>(\n      `${this.path}/creditcard/${creditCardId}/delete`,\n      data,\n      config\n    );\n  }\n\n  /**\n   * Initiates the binding process of a TrueMoney account for a subscriber with a specified identifier.\n   * Returns a deeplink which a client application should provide to the subscriber in some form (like QR-code or something else).\n   * The deeplink redirects the subscriber to TMN application where he can accept binding.\n   * @param data auth data\n   * @param metadata redirect url additional parameters\n   * @param config AxiosConfiguration\n   */\n  initTrueMoney(data: NoraApiInitTrueMoneyRequest, config?: AxiosRequestConfig): Promise<NoraApiInitTrueMoneyResponse> {\n    return this.context.post<NoraApiInitTrueMoneyResponse, NoraApiInitTrueMoneyRequest>(\n      `${this.path}/wallet/true-money/init`,\n      data,\n      config\n    );\n  }\n\n  /**\n   * Finishes the binding process of a TrueMoney account after the subscriber has given the necessary consent\n   * and auth code has been retrieved by a client application.\n   * @param data auth data\n   * @param authCode code for binding true money\n   * @param config AxiosConfiguration\n   */\n  bindTrueMoney(data: NoraApiBindTrueMoneyRequest, config?: AxiosRequestConfig): Promise<NoraApiBindTrueMoneyResponse> {\n    return this.context.post<NoraApiBindTrueMoneyResponse, NoraApiBindTrueMoneyRequest>(\n      `${this.path}/wallet/true-money/bind`,\n      data,\n      config\n    );\n  }\n}\n","import type {\n  NoraAPIGetCountriesResponse,\n  NoraAPIGetLanguagesRequest,\n  NoraAPIGetLanguagesResponse,\n  NoraAPIGetCurrenciesRequest,\n  NoraAPIGetCurrenciesResponse,\n  NoraAPIGetCountriesRequest,\n} from './types/dictionaries.types';\nimport type { AxiosRequestConfig } from 'axios';\nimport type { ContextAPI } from './types';\n\nexport class DictionariesAPI {\n  readonly path = '/dictionaries';\n  readonly context: ContextAPI;\n\n  constructor(ctx: ContextAPI) {\n    this.context = ctx;\n  }\n\n  /**\n   * Get avaiable countries\n   * @param data SubscriptionsAPIGetRequest\n   * @param config AxiosConfig\n   * @returns List of available subscriptions\n   */\n  getCountries(data?: NoraAPIGetCountriesRequest, config?: AxiosRequestConfig): Promise<NoraAPIGetCountriesResponse> {\n    return this.context.post<NoraAPIGetCountriesResponse, NoraAPIGetCountriesRequest>(\n      `${this.path}/countries/get`,\n      data || {},\n      config\n    );\n  }\n\n  /**\n   * Get avaiable languages\n   * @param data SubscriptionsAPIGetRequest\n   * @param config AxiosConfig\n   * @returns List of available subscriptions\n   */\n  getLanguages(data?: NoraAPIGetLanguagesRequest, config?: AxiosRequestConfig): Promise<NoraAPIGetLanguagesResponse> {\n    return this.context.post<NoraAPIGetLanguagesResponse, NoraAPIGetLanguagesRequest>(\n      `${this.path}/languages/get`,\n      data || {},\n      config\n    );\n  }\n\n  /**\n   * Get avaiable currencies\n   * @param data SubscriptionsAPIGetRequest\n   * @param config AxiosConfig\n   * @returns List of available subscriptions\n   */\n  getCurrencies(\n    data?: NoraAPIGetCurrenciesRequest,\n    config?: AxiosRequestConfig\n  ): Promise<NoraAPIGetCurrenciesResponse> {\n    return this.context.post<NoraAPIGetCurrenciesResponse, NoraAPIGetCurrenciesRequest>(\n      `${this.path}/currencies/get`,\n      data || {},\n      config\n    );\n  }\n}\n","import type { AxiosRequestConfig } from 'axios';\nimport type { ContextAPI } from './types';\nimport {\n  NoraAPIAutopayContentRentRequest,\n  NoraAPIAutopayContentRentResponse,\n  NoraAPIGetContentRentRequest,\n  NoraAPIGetContentRentResponse,\n} from './types/content-rent.types';\n\nexport class ContentRentProlongationAPI {\n  readonly path = '/content-rent-prolongations';\n  readonly context: ContextAPI;\n\n  constructor(ctx: ContextAPI) {\n    this.context = ctx;\n  }\n\n  /**\n   * Get content allowed for auto payments.\n   * @param data NoraAPIGetContentRentRequest\n   * @param config AxiosConfig\n   * @returns List of available subscriptions\n   */\n  get(data?: NoraAPIGetContentRentRequest, config?: AxiosRequestConfig): Promise<NoraAPIGetContentRentResponse> {\n    return this.context.post<NoraAPIGetContentRentResponse, NoraAPIGetContentRentRequest>(\n      `${this.path}/get`,\n      data,\n      config\n    );\n  }\n\n  /**\n   * Get all available subscriptions with addons combined by subscription plans.\n   * @param data\n   * @param config\n   */\n  toggleAutopay(\n    data?: NoraAPIAutopayContentRentRequest,\n    config?: AxiosRequestConfig\n  ): Promise<NoraAPIAutopayContentRentResponse> {\n    return this.context.post<NoraAPIAutopayContentRentResponse, NoraAPIAutopayContentRentRequest>(\n      `${this.path}/autopay`,\n      data,\n      config\n    );\n  }\n}\n","import { SubscriptionsAPI } from './subscriptions';\nimport { PaymentsAPI } from './payments';\nimport * as configuration from '../configure';\nimport { SubscribersAPI } from './subscribers';\nimport { client } from './../client';\n\nimport type { APIConfig, ContextAPI } from './types';\nimport type { AxiosInstance, AxiosResponse } from 'axios';\nimport { NoraApiError } from '../errors/nora-api.error';\nimport { PaymentSystemsAPI } from './payment-systems';\nimport { PaymentMethodsAPI } from './payment-methods';\nimport { DictionariesAPI } from './dictionaries';\nimport { ContentRentProlongationAPI } from './content-rent';\n\nconst {\n  defaultOptions: { token, login, baseURL },\n} = configuration;\n\nexport class NoraAPI implements ContextAPI {\n  readonly config: APIConfig;\n  readonly logger: unknown;\n\n  // resources\n  readonly subscribers: SubscribersAPI;\n  readonly payments: PaymentsAPI;\n  readonly subscriptions: SubscriptionsAPI;\n  readonly paymentSystems: PaymentSystemsAPI;\n  readonly paymentMethods: PaymentMethodsAPI;\n  readonly dictionaries: DictionariesAPI;\n  readonly contentRent: ContentRentProlongationAPI;\n\n  constructor(cfg?: APIConfig) {\n    // resolve config\n    this.config = {\n      baseURL: cfg?.baseURL || baseURL,\n      token: cfg?.token || token,\n      login: cfg?.login || login,\n    };\n\n    const tokenConfig = this.config.token;\n    const loginConfig = this.config.login;\n    client.interceptors.request.use(function (cfg) {\n      // Mixin token to auth data\n      if (Object.prototype.hasOwnProperty.call(cfg, 'data')) {\n        const { data } = cfg;\n        cfg.data = {\n          ...data,\n          auth: { token: tokenConfig, login: loginConfig, ...data.auth },\n        };\n      } else {\n        cfg.data = { auth: { token: tokenConfig, login: loginConfig } };\n      }\n      return cfg;\n    });\n\n    this.subscribers = new SubscribersAPI(this);\n    this.payments = new PaymentsAPI(this);\n    this.subscriptions = new SubscriptionsAPI(this);\n    this.paymentSystems = new PaymentSystemsAPI(this);\n    this.paymentMethods = new PaymentMethodsAPI(this);\n    this.dictionaries = new DictionariesAPI(this);\n    this.contentRent = new ContentRentProlongationAPI(this);\n  }\n\n  send(): AxiosInstance {\n    // TODO: may be support multiple clients\n    /* const { token, login } = this.config;\n    client.interceptors.request.use(function (cfg) {\n      // Mixin token to auth data\n      if (Object.prototype.hasOwnProperty.call(cfg, 'data')) {\n        const { data } = cfg;\n        cfg.data = {\n          ...data,\n          auth: { token, login, ...data.auth },\n        };\n      } else {\n        cfg.data = { auth: { token, login } };\n      }\n      return cfg;\n    }); */\n\n    return client;\n  }\n\n  async post<R = any, D = any>(url: string, data?: D, config?: any): Promise<R> {\n    try {\n      const baseUrl = config ? config?.baseURL : null;\n      const result = await this.send().post<unknown, AxiosResponse<R>, D>(\n        `${baseUrl || this.config.baseURL}${url}`,\n        data,\n        config\n      );\n      return result?.data;\n    } catch (error: any) {\n      // TODO: format errors remove AxiosError\n      throw new NoraApiError(error);\n    }\n  }\n\n  async get<R = any, D = any>(url: string, config?: any): Promise<R> {\n    try {\n      const baseUrl = config ? config?.baseURL : null;\n      const result = await this.send().get<unknown, AxiosResponse<R>, D>(\n        `${baseUrl || this.config.baseURL}${url}`,\n        config\n      );\n      return result?.data;\n    } catch (error: any) {\n      // TODO: format errors remove AxiosError\n      throw new NoraApiError(error);\n    }\n  }\n}\n","export enum PaymentSystemTypes {\n  AUTHORIZE_NET = 'AUTHORIZE_NET',\n  CASH = 'CASH',\n  CHECK = 'CHECK',\n  NEWEBPAY = 'NEWEBPAY',\n  PAYPAL = 'PAYPAL',\n  TELR = 'TELR',\n  EXTERNAL_PAYMENTS = 'EXTERNAL_PAYMENTS',\n  GR4VY_GATEWAY = 'GR4VY_GATEWAY',\n  CCPP = 'CCPP',\n  TRUE_MONEY = 'TRUE_MONEY',\n}\n\nexport enum ExternalPaymentSystemTypes {\n  AUTHORIZE_NET_MANUAL = 'AUTHORIZE_NET_MANUAL',\n  WESTERN_UNION = 'WESTERN_UNION',\n  MONEY_GRAM = 'MONEY_GRAM',\n  PAYPAL_EXPRESS = 'PAYPAL_EXPRESS',\n}\n\nexport enum AddOnType {\n  RENT = 'RENT',\n  PURCHASE = 'PURCHASE',\n}\n\nexport enum SubscriberPaymentStatuses {\n  ACTIVE = 'ACTIVE',\n  EXPIRED = 'EXPIRED',\n  VOIDED = 'VOIDED',\n  OVERRIDDEN = 'OVERRIDDEN',\n  SKIPPED = 'SKIPPED',\n  ON_HOLD = 'ON_HOLD',\n  PENDING = 'PENDING',\n}\n\nexport enum SubscriptionStatus {\n  PENDING = 'PENDING',\n  TOA_PENDING = 'TOA_PENDING',\n  ACTIVE = 'ACTIVE',\n  UPCOMING = 'UPCOMING',\n  CANCELLED = 'CANCELLED',\n  VOIDED = 'VOIDED',\n  EXPIRED = 'EXPIRED',\n}\n\nexport enum SubscriptionReason {\n  OVERRIDDEN = 'Overridden',\n  SKIPPED = 'Skipped',\n}\n\n/**\n * External list of payment system type\n */\nexport enum PaymentSystems {\n  GR4VY_GATEWAY = 'GR4VY_GATEWAY',\n  AUTHORIZE_NET = 'AUTHORIZE_NET',\n  CASH = 'CASH',\n  CHECK = 'CHECK',\n  NEWEBPAY = 'NEWEBPAY',\n  PAYPAL = 'PAYPAL',\n  TELR = 'TELR',\n  EXTERNAL_PAYMENTS = 'EXTERNAL_PAYMENTS',\n  CCPP = 'CCPP',\n  TRUE_MONEY = 'TRUE_MONEY',\n}\n\nexport enum PeriodTimeUnits {\n  DAY = 'DAY',\n  MONTH = 'MONTH',\n  YEAR = 'YEAR',\n}\n\nexport enum AccessoryTypes {\n  BOX = 'BOX',\n  FEE = 'FEE',\n  SHIPPING = 'SHIPPING',\n  EQUIPMENT = 'EQUIPMENT',\n}\n\nexport enum SubscriptionPlatforms {\n  STB = 'STB',\n  PC = 'PC',\n  IOS = 'iOS',\n  ANDROID = 'Android',\n  SAMSUNGTV = 'SamsungTV',\n  OTHERS = 'Others',\n  LG = 'LG',\n  WEB = 'WEB',\n}\n\nexport enum SubscriberSubscriptionType {\n  PAID = 'PAID',\n  FREEMIUM = 'FREEMIUM',\n}\n\nexport enum PartnerProviders {\n  iQIYI = 'iQIYI',\n}\n"],"names":["SubscriptionsAPI","path","context","constructor","ctx","this","get","data","config","post","getPlans","PaymentsAPI","payReSubscription","paySubscription","calculate","calculateContentSets","payContentSets","payAdditions","calculateAdditions","userAgent","process","version","arch","defaultOptions","mode","env","SETPLEX_API_MODE","baseURL","SETPLEX_API_BASE_URL","token","SETPLEX_API_TOKEN","login","SETPLEX_API_LOGIN","headers","SubscribersAPI","getByEmail","info","update","getSubscriptionContentSets","getSubscription","unassignDevice","deviceSerialNumber","cancelSubscription","autoPaySubscription","getSubscriptionPartnerProducts","validateUsername","configuration","client","axios","create","NoraApiError","Error","response","status","message","Object","prototype","hasOwnProperty","call","name","super","AxiosError","captureStackTrace","PaymentSystemsAPI","getAvailable","getOptions","addFlow","checkResult","PaymentMethodsAPI","add","setDefaultWallet","walletId","deleteWallet","createCreditCard","setDefaultCreditCard","creditCardId","deleteCreditCard","initTrueMoney","bindTrueMoney","DictionariesAPI","getCountries","getLanguages","getCurrencies","ContentRentProlongationAPI","toggleAutopay","PaymentSystemTypes","ExternalPaymentSystemTypes","AddOnType","SubscriberPaymentStatuses","SubscriptionStatus","SubscriptionReason","PaymentSystems","PeriodTimeUnits","AccessoryTypes","SubscriptionPlatforms","SubscriberSubscriptionType","PartnerProviders","NoraAPIPaymentSystemTypes","NoraAPIExternalPaymentSystemTypes","NoraAPIAddOnType","NoraAPISubscriberPaymentStatuses","NoraAPIPaymentSystems","NoraAPIAccessoryTypes","logger","subscribers","payments","subscriptions","paymentSystems","paymentMethods","dictionaries","contentRent","cfg","tokenConfig","loginConfig","interceptors","request","use","auth","send","async","url","baseUrl","error"],"mappings":"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"}