{"version":3,"file":"index.cjs","sources":["../../src/resource/subscriptions.ts","../../src/resource/payments.ts","../../src/configure/index.ts","../../src/resource/subscribers.ts","../../src/client/index.ts","../../src/errors/nora-api.error.ts","../../src/resource/payment-systems.ts","../../src/resource/payment-methods.ts","../../src/resource/dictionaries.ts","../../src/resource/content-rent.ts","../../src/resource/paid-content.ts","../../src/resource/index.ts","../../src/resource/types/constants.ts"],"sourcesContent":["import type { AxiosRequestConfig } from 'axios';\r\nimport type { ContextAPI } from './types';\r\nimport type {\r\n  NoraAPIGetSubscriptionsPlansRequest,\r\n  NoraAPIGetSubscriptionsPlansResponse,\r\n  NoraAPIGetSubscriptionsRequest,\r\n  NoraAPIGetSubscriptionsResponse,\r\n} from './types/subscriptions.types';\r\n\r\nexport class SubscriptionsAPI {\r\n  readonly path = '/subscriptions';\r\n  readonly context: ContextAPI;\r\n\r\n  constructor(ctx: ContextAPI) {\r\n    this.context = ctx;\r\n  }\r\n\r\n  /**\r\n   * Get info about available subscriptions\r\n   * @param data SubscriptionsAPIGetRequest\r\n   * @param config AxiosConfig\r\n   * @returns List of available subscriptions\r\n   */\r\n  get(data?: NoraAPIGetSubscriptionsRequest, config?: AxiosRequestConfig): Promise<NoraAPIGetSubscriptionsResponse> {\r\n    return this.context.post<NoraAPIGetSubscriptionsResponse, NoraAPIGetSubscriptionsRequest>(\r\n      `${this.path}/get`,\r\n      data || {},\r\n      config\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get all available subscriptions with addons combined by subscription plans.\r\n   * @param data\r\n   * @param config\r\n   */\r\n  getPlans(\r\n    data?: NoraAPIGetSubscriptionsPlansRequest,\r\n    config?: AxiosRequestConfig\r\n  ): Promise<NoraAPIGetSubscriptionsPlansResponse> {\r\n    return this.context.post<NoraAPIGetSubscriptionsPlansResponse, NoraAPIGetSubscriptionsPlansRequest>(\r\n      `${this.path}/plans/get`,\r\n      data || {},\r\n      config\r\n    );\r\n  }\r\n}\r\n","import type {\r\n  PaymentsAPIDoRequest,\r\n  PaymentsAPIDoResponse,\r\n  PaymentsAPIDoSingleRequest,\r\n  PaymentsAPIDoSingleResponse,\r\n  PaymentsAPICalculateRequest,\r\n  PaymentsAPICalculateResponse,\r\n  PaymentsAPICalculateContentSetsRequest,\r\n  PaymentsAPICalculateContentSetsResponse,\r\n  PaymentsAPIPayContentSetsRequest,\r\n  PaymentsAPIPayContentSetsResponse,\r\n  PaymentsAPICalculateAdditionsRequest,\r\n  PaymentsAPIPayAdditionsRequest,\r\n  PaymentsAPIPayAdditionsResponse,\r\n  PaymentsAPICalculateAdditionsResponse,\r\n} from './types/payments.types';\r\nimport type { AxiosRequestConfig } from 'axios';\r\nimport type { ContextAPI } from './types';\r\n\r\nexport class PaymentsAPI {\r\n  readonly path = '/payments';\r\n  readonly context: ContextAPI;\r\n\r\n  constructor(ctx: ContextAPI) {\r\n    this.context = ctx;\r\n  }\r\n  /**\r\n   * Creating payment for subscriber\r\n   * @param data Payment data\r\n   * @param config AxiosConfiguration\r\n   */\r\n  payReSubscription(data: PaymentsAPIDoRequest, config?: AxiosRequestConfig): Promise<PaymentsAPIDoResponse> {\r\n    return this.context.post<PaymentsAPIDoResponse, PaymentsAPIDoRequest>(`${this.path}/do`, data, config);\r\n  }\r\n\r\n  /**\r\n   * Creating subscriber, credit card and make payment for subscriber\r\n   * @param data Full data about subscriber, credit card and payment\r\n   * @param config AxiosConfiguration\r\n   */\r\n  paySubscription(data: PaymentsAPIDoSingleRequest, config?: AxiosRequestConfig): Promise<PaymentsAPIDoSingleResponse> {\r\n    return this.context.post<PaymentsAPIDoSingleResponse, PaymentsAPIDoSingleRequest>(\r\n      `${this.path}/doSingle`,\r\n      data,\r\n      config\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Calculates amount of subscriber's payment\r\n   * @param data Required info for calculation\r\n   * @param config AxiosConfiguration\r\n   * @returns Calculation for needed subscription\r\n   */\r\n  calculate(data: PaymentsAPICalculateRequest, config?: AxiosRequestConfig): Promise<PaymentsAPICalculateResponse> {\r\n    return this.context.post<PaymentsAPICalculateResponse, PaymentsAPICalculateRequest>(\r\n      `${this.path}/calculate`,\r\n      data,\r\n      config\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Calculate Content Set Addon Prices\r\n   * @param data Required info for calculation\r\n   * @param config AxiosConfiguration\r\n   * @returns Calculation for needed subscription\r\n   */\r\n  calculateContentSets(\r\n    data: PaymentsAPICalculateContentSetsRequest,\r\n    config?: AxiosRequestConfig\r\n  ): Promise<PaymentsAPICalculateContentSetsResponse> {\r\n    return this.context.post<PaymentsAPICalculateContentSetsResponse, PaymentsAPICalculateContentSetsRequest>(\r\n      `${this.path}/content-sets/calculate`,\r\n      data,\r\n      config\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Pay Content Set Addons\r\n   * @param data Required info for calculation\r\n   * @param config AxiosConfiguration\r\n   * @returns Calculation for needed subscription\r\n   */\r\n  payContentSets(\r\n    data: PaymentsAPIPayContentSetsRequest,\r\n    config?: AxiosRequestConfig\r\n  ): Promise<PaymentsAPIPayContentSetsResponse> {\r\n    return this.context.post<PaymentsAPIPayContentSetsResponse, PaymentsAPIPayContentSetsRequest>(\r\n      `${this.path}/content-sets/do`,\r\n      data,\r\n      config\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Pay Additions\r\n   * @param data Payment data\r\n   * @param config AxiosConfiguration\r\n   */\r\n  payAdditions(data: PaymentsAPIPayAdditionsRequest, config?: AxiosRequestConfig) {\r\n    return this.context.post<PaymentsAPIPayAdditionsResponse, PaymentsAPIPayAdditionsRequest>(\r\n      `${this.path}/additions/do`,\r\n      data,\r\n      config\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Calculate additions\r\n   * @param data Required info for calculation\r\n   * @param config AxiosConfiguration\r\n   */\r\n  calculateAdditions(data: PaymentsAPICalculateAdditionsRequest, config?: AxiosRequestConfig) {\r\n    return this.context.post<PaymentsAPICalculateAdditionsResponse, PaymentsAPICalculateAdditionsRequest>(\r\n      `${this.path}/additions/calculate`,\r\n      data,\r\n      config\r\n    );\r\n  }\r\n}\r\n","// import { version } from '../../package.json';\r\nconst version = '0.0.1';\r\nexport const userAgent =\r\n  'Setplex/External-API-node-SDK ' + version + ' (node ' + process.version + '-' + process.arch + ')';\r\n\r\nexport const defaultOptions = {\r\n  mode: process.env.SETPLEX_API_MODE || '', // ?\r\n  baseURL: process.env.SETPLEX_API_BASE_URL || '',\r\n  token: process.env.SETPLEX_API_TOKEN || '',\r\n  login: process.env.SETPLEX_API_LOGIN || '',\r\n  headers: {\r\n    'User-Agent': userAgent,\r\n  },\r\n};\r\n","import type {\r\n  NoraAPIGetSubscriberByEmailRequest,\r\n  NoraAPIGetSubscriberByEmailResponse,\r\n  NoraAPIGetSubscriberInfoRequest,\r\n  NoraAPIGetSubscriberRequest,\r\n  NoraAPIGetSubscriberResponse,\r\n  NoraAPIGetSubscribersByParametersRequest,\r\n  NoraAPIGetSubscribersByParametersResponse, NoraApiSubscriberAcceptToaRequest, NoraApiSubscriberAcceptToaResponse,\r\n  NoraApiSubscriberAutoPaySubscriptionRequest,\r\n  NoraApiSubscriberAutoPaySubscriptionResponse,\r\n  NoraApiSubscriberCancelSubscriptionRequest,\r\n  NoraApiSubscriberCancelSubscriptionResponse, NoraApiSubscriberGetToaRequest, NoraApiSubscriberGetToaResponse,\r\n  NoraApiSubscriberSubscriptionContentSetsRequest,\r\n  NoraApiSubscriberSubscriptionContentSetsResponse,\r\n  NoraApiSubscriberSubscriptionGetRequest,\r\n  NoraApiSubscriberSubscriptionGetResponse,\r\n  NoraApiSubscriberSubscriptionPartnersProductsRequest,\r\n  NoraApiSubscriberSubscriptionPartnersProductsResponse,\r\n  NoraApiSubscriberValidateUsernameRequest,\r\n  NoraApiSubscriberValidateUsernameResponse,\r\n  NoraApiSusbscriberUnassignDeviceRequest,\r\n  NoraApiSusbscriberUnassignDeviceResponse,\r\n  NoraAPIUpdateSubscriberInfoRequest,\r\n  NoraAPIUpdateSubscriberResponse,\r\n} from './types/subscribers.types';\r\nimport type { AxiosRequestConfig } from 'axios';\r\nimport type { ContextAPI } from './types';\r\n\r\nexport class SubscribersAPI {\r\n  readonly path = '/subscribers';\r\n  readonly context: ContextAPI;\r\n\r\n  constructor(ctx: ContextAPI) {\r\n    this.context = ctx;\r\n  }\r\n\r\n  /**\r\n   * Get subscriber by accountNumber and last name\r\n   * @param data Subscriber auth info\r\n   * @param config AxiosConfig\r\n   * @returns Subscriber detail info\r\n   */\r\n  get(data: NoraAPIGetSubscriberRequest, config?: AxiosRequestConfig): Promise<NoraAPIGetSubscriberResponse> {\r\n    return this.context.post<NoraAPIGetSubscriberResponse, NoraAPIGetSubscriberRequest>(\r\n      `${this.path}/get`,\r\n      data,\r\n      config\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get subscribers by email\r\n   * @param data Subscriber email\r\n   * @param config AxiosConfig\r\n   * @returns Subscribers detail info\r\n   * @deprecated\r\n   */\r\n  getByEmail(\r\n    data: NoraAPIGetSubscriberByEmailRequest,\r\n    config?: AxiosRequestConfig\r\n  ): Promise<NoraAPIGetSubscriberByEmailResponse> {\r\n    return this.context.post<NoraAPIGetSubscriberByEmailResponse, NoraAPIGetSubscriberByEmailRequest>(\r\n      `${this.path}/search`,\r\n      data,\r\n      config\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get subscriber by login and password\r\n   * @param data Subscriber data info\r\n   * @param config AxiosConfig\r\n   * @returns Subscriber detail info\r\n   */\r\n  info(data: NoraAPIGetSubscriberInfoRequest, config?: AxiosRequestConfig): Promise<NoraAPIGetSubscriberResponse> {\r\n    return this.context.post<NoraAPIGetSubscriberResponse, NoraAPIGetSubscriberInfoRequest>(\r\n      `${this.path}/info`,\r\n      data,\r\n      config\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Update Subscriber\r\n   * @description This call will update subscriber\r\n   * @param data Subscriber data info\r\n   * @param config AxiosConfig\r\n   * @returns Subscriber detail info\r\n   */\r\n  update(\r\n    data: NoraAPIUpdateSubscriberInfoRequest,\r\n    config?: AxiosRequestConfig\r\n  ): Promise<NoraAPIUpdateSubscriberResponse> {\r\n    return this.context.post<NoraAPIUpdateSubscriberResponse, NoraAPIUpdateSubscriberInfoRequest>(\r\n      `${this.path}/update`,\r\n      data,\r\n      config\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Loading subscriber subscription content sets\r\n   * @param config AxiosConfig\r\n   * @returns Subscription content sets info\r\n   */\r\n  getSubscriptionContentSets(\r\n    data: NoraApiSubscriberSubscriptionContentSetsRequest,\r\n    config?: AxiosRequestConfig\r\n  ): Promise<NoraApiSubscriberSubscriptionContentSetsResponse> {\r\n    return this.context.post<\r\n      NoraApiSubscriberSubscriptionContentSetsResponse,\r\n      NoraApiSubscriberSubscriptionContentSetsRequest\r\n    >(`${this.path}/subscription/content-sets/get`, data, config);\r\n  }\r\n\r\n  /**\r\n   * Loading subscriber subscription info\r\n   * @param config AxiosConfig\r\n   * @param data body request data\r\n   * @returns Subscription content sets info\r\n   */\r\n  getSubscription(\r\n    data: NoraApiSubscriberSubscriptionGetRequest,\r\n    config?: AxiosRequestConfig\r\n  ): Promise<NoraApiSubscriberSubscriptionGetResponse> {\r\n    return this.context.post<NoraApiSubscriberSubscriptionGetResponse, NoraApiSubscriberSubscriptionGetRequest>(\r\n      `${this.path}/subscription/get`,\r\n      data,\r\n      config\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Unassign device call\r\n   * @param data auth data\r\n   * @param deviceSerialNumber Device serial number\r\n   * @param config axios config\r\n   */\r\n  unassignDevice(\r\n    data: NoraApiSusbscriberUnassignDeviceRequest,\r\n    deviceSerialNumber: string,\r\n    config?: AxiosRequestConfig\r\n  ): Promise<NoraApiSusbscriberUnassignDeviceResponse> {\r\n    return this.context.post<NoraApiSusbscriberUnassignDeviceResponse, NoraApiSusbscriberUnassignDeviceRequest>(\r\n      `${this.path}/devices/${deviceSerialNumber}/unassign`,\r\n      data,\r\n      config\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This call cancels the current subscriber’s subscription. Subscriber should have only one active subscription.\r\n   * @param data auth data\r\n   * @param config axios config\r\n   * @returns\r\n   */\r\n  cancelSubscription(\r\n    data: NoraApiSubscriberCancelSubscriptionRequest,\r\n    config?: AxiosRequestConfig\r\n  ): Promise<NoraApiSubscriberCancelSubscriptionResponse> {\r\n    return this.context.post<NoraApiSubscriberCancelSubscriptionResponse, NoraApiSubscriberCancelSubscriptionRequest>(\r\n      `${this.path}/subscription/cancel`,\r\n      data,\r\n      config\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This call updates (increase or decrease) current subscriber’s subscription. Subscriber should have only one active subscription.\r\n   * @param data autopay & auth data\r\n   * @param config axios config\r\n   */\r\n  autoPaySubscription(\r\n    data: NoraApiSubscriberAutoPaySubscriptionRequest,\r\n    config?: AxiosRequestConfig\r\n  ): Promise<NoraApiSubscriberAutoPaySubscriptionResponse> {\r\n    return this.context.post<NoraApiSubscriberAutoPaySubscriptionResponse, NoraApiSubscriberAutoPaySubscriptionRequest>(\r\n      `${this.path}/subscription/autopay`,\r\n      data,\r\n      config\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Loading subscriber subscription available partner products\r\n   * @param data\r\n   * @param config AxiosConfig\r\n   * @returns Subscription partners products info\r\n   */\r\n  getSubscriptionPartnerProducts(\r\n    data: NoraApiSubscriberSubscriptionPartnersProductsRequest,\r\n    config?: AxiosRequestConfig\r\n  ): Promise<NoraApiSubscriberSubscriptionPartnersProductsResponse> {\r\n    return this.context.post<\r\n      NoraApiSubscriberSubscriptionPartnersProductsResponse,\r\n      NoraApiSubscriberSubscriptionPartnersProductsRequest\r\n    >(`${this.path}/subscription/partner-products/get`, data, config);\r\n  }\r\n\r\n  /**\r\n   * Validates uniqueness username\r\n   * @param data\r\n   * @param config\r\n   */\r\n  validateUsername(\r\n    data: NoraApiSubscriberValidateUsernameRequest,\r\n    config?: AxiosRequestConfig\r\n  ): Promise<NoraApiSubscriberValidateUsernameResponse> {\r\n    return this.context.post<NoraApiSubscriberValidateUsernameResponse, NoraApiSubscriberValidateUsernameRequest>(\r\n      `${this.path}/validate/username`,\r\n      data,\r\n      config\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get subscribers by parameters\r\n   * @description Search is allowed only by email or phone or providerType with accessToken without any combination with parameters.\r\n   * @param data Subscriber params\r\n   * @param config AxiosConfig\r\n   * @returns Subscribers detail info\r\n   */\r\n  search(\r\n    data: NoraAPIGetSubscribersByParametersRequest,\r\n    config?: AxiosRequestConfig\r\n  ): Promise<NoraAPIGetSubscribersByParametersResponse> {\r\n    return this.context.post<NoraAPIGetSubscribersByParametersResponse, NoraAPIGetSubscribersByParametersRequest>(\r\n      `${this.path}/search`,\r\n      data,\r\n      config\r\n    );\r\n  }\r\n\r\n  getToa(data: NoraApiSubscriberGetToaRequest, config?: AxiosRequestConfig): Promise<NoraApiSubscriberGetToaResponse> {\r\n    return this.context.post<NoraApiSubscriberGetToaResponse, NoraApiSubscriberGetToaRequest>(\r\n      `${this.path}/toa/get`,\r\n      data,\r\n      config\r\n    );\r\n  }\r\n\r\n  acceptToa(\r\n    data: NoraApiSubscriberAcceptToaRequest,\r\n    config?: AxiosRequestConfig\r\n  ): Promise<NoraApiSubscriberAcceptToaResponse> {\r\n    return this.context.post<NoraApiSubscriberAcceptToaResponse, NoraApiSubscriberAcceptToaRequest>(\r\n      `${this.path}/toa/accept`,\r\n      data,\r\n      config\r\n    );\r\n  }\r\n}\r\n","import axios from 'axios';\r\nimport * as configuration from './../configure';\r\n\r\nconst {\r\n  defaultOptions: { headers },\r\n} = configuration;\r\n\r\nexport const client = axios.create({\r\n  headers: {\r\n    ...headers,\r\n  },\r\n});\r\n","import { AxiosError } from 'axios';\r\n\r\nexport class NoraApiError extends Error {\r\n  response = {\r\n    status: 0,\r\n  };\r\n\r\n  constructor(message: any) {\r\n    if (Object.prototype.hasOwnProperty.call(message, 'name')) message.name = '';\r\n\r\n    super(message);\r\n\r\n    // this.name = this.constructor.name;\r\n    this.name = 'NoraApiError';\r\n\r\n    if (message instanceof AxiosError) {\r\n      const { response } = message;\r\n      if (response) {\r\n        this.response.status = response.status;\r\n      }\r\n    }\r\n\r\n    Error.captureStackTrace(this, this.constructor);\r\n  }\r\n}\r\n","import type { ContextAPI } from './types';\r\nimport type { AxiosRequestConfig } from 'axios';\r\nimport type {\r\n  NoraAPIAvailablePaymentSystemsRequest,\r\n  NoraAPIAvailablePaymentSystemsResponse,\r\n  NoraAPIPaymentSystemsAddFlowRequest,\r\n  NoraAPIPaymentSystemsAddFlowResponse,\r\n  NoraAPIPaymentSystemsCheckResultRequest,\r\n  NoraAPIPaymentSystemsCheckResultResponse,\r\n  NoraAPIPaymentSystemsOptionsRequest,\r\n  NoraAPIPaymentSystemsOptionsResponse,\r\n} from './types/payment-systems.types';\r\n\r\nexport class PaymentSystemsAPI {\r\n  readonly path = '/payment-form';\r\n  readonly context: ContextAPI;\r\n\r\n  constructor(ctx: ContextAPI) {\r\n    this.context = ctx;\r\n  }\r\n\r\n  /**\r\n   * Get available payment systems\r\n   * @description Retrieves available payment system types for displaying payment form.\r\n   * If first element in response result is GR4VY_GATEWAY - other payment systems types have to be ignored and payment\r\n   * flow for GR4VY_GATEWAY have to be used.\r\n   * @param data Full data about subscriber, credit card and payment\r\n   * @param config AxiosConfiguration\r\n   */\r\n  getAvailable(\r\n    data?: NoraAPIAvailablePaymentSystemsRequest,\r\n    config?: AxiosRequestConfig\r\n  ): Promise<NoraAPIAvailablePaymentSystemsResponse> {\r\n    return this.context.post<NoraAPIAvailablePaymentSystemsResponse, NoraAPIAvailablePaymentSystemsRequest>(\r\n      `${this.path}/payment-systems`,\r\n      data,\r\n      config\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get payment system options\r\n   * @description Retrieves payment form options (currently is used for GR4VY_GATEWAY payment system flow)\r\n   * @param data Full data about subscriber, credit card and payment\r\n   * @param config AxiosConfiguration\r\n   */\r\n  getOptions(\r\n    data?: NoraAPIPaymentSystemsOptionsRequest,\r\n    config?: AxiosRequestConfig\r\n  ): Promise<NoraAPIPaymentSystemsOptionsResponse> {\r\n    return this.context.post<NoraAPIPaymentSystemsOptionsResponse, NoraAPIPaymentSystemsOptionsRequest>(\r\n      `${this.path}/options`,\r\n      data,\r\n      config\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get payment form options to add payment method for Gr4vy gateway\r\n   * @param data Full data about subscriber, credit card and payment\r\n   * @param config AxiosConfiguration\r\n   */\r\n  addFlow(\r\n    data?: NoraAPIPaymentSystemsAddFlowRequest,\r\n    config?: AxiosRequestConfig\r\n  ): Promise<NoraAPIPaymentSystemsAddFlowResponse> {\r\n    return this.context.post<NoraAPIPaymentSystemsAddFlowResponse, NoraAPIPaymentSystemsAddFlowRequest>(\r\n      `${this.path}/options/add-flow`,\r\n      data,\r\n      config\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Check result by payment number. Used for 2C2P Payments\r\n   * @param data Full data about subscriber, invoice number from 2C2P\r\n   * @param config AxiosConfiguration\r\n   */\r\n  checkResult(\r\n    data?: NoraAPIPaymentSystemsCheckResultRequest,\r\n    config?: AxiosRequestConfig\r\n  ): Promise<NoraAPIPaymentSystemsCheckResultResponse> {\r\n    return this.context.post<NoraAPIPaymentSystemsCheckResultResponse, NoraAPIPaymentSystemsCheckResultRequest>(\r\n      `${this.path}/check`,\r\n      data,\r\n      config\r\n    );\r\n  }\r\n}\r\n","import type { AxiosRequestConfig } from 'axios';\r\nimport type { ContextAPI } from './types';\r\nimport type {\r\n  NoraApiCreateCreditCardsRequest,\r\n  NoraApiCreateCreditCardsResponse,\r\n  NoraApiDeleteCreditCardRequest,\r\n  NoraApiSetDefaultCreditCardRequest,\r\n  NoraApiSetDefaultCreditCardResponse,\r\n  NoraApiGetPaymentMethodResponse,\r\n  NoraApiGetPaymentMethodReuqest,\r\n  NoraApiSetDefaultWalletRequest,\r\n  NoraApiSetDefaultWalletResponse,\r\n  NoraApiDeleteWalletRequest,\r\n  NoraApiDeleteWalletResponse,\r\n  NoraApiDeleteCreditCardResponse,\r\n  NoraApiAddPaymentMethodRequest,\r\n  NoraApiAddPaymentMethodResponse,\r\n  NoraApiInitTrueMoneyRequest,\r\n  NoraApiInitTrueMoneyResponse,\r\n  NoraApiBindTrueMoneyRequest,\r\n  NoraApiBindTrueMoneyResponse,\r\n  NoraApiInitDCBRequest,\r\n  NoraApiInitDCBResponse,\r\n  NoraApiVerifyCertIdDCBRequest,\r\n  NoraApiVerifyCertIdDCBResponse,\r\n  NoraApiVerifyOtpDCBRequest,\r\n  NoraApiVerifyOtpDCBResponse,\r\n} from './types/payment-method.types';\r\n\r\nexport class PaymentMethodsAPI {\r\n  readonly path = '/payment-method';\r\n  readonly context: ContextAPI;\r\n\r\n  constructor(ctx: ContextAPI) {\r\n    this.context = ctx;\r\n  }\r\n\r\n  /**\r\n   * Get saved tokenized payment methods for subscriber\r\n   * @param data\r\n   * @param config\r\n   */\r\n  get(data: NoraApiGetPaymentMethodReuqest, config?: AxiosRequestConfig): Promise<NoraApiGetPaymentMethodResponse> {\r\n    return this.context.post<NoraApiGetPaymentMethodResponse, NoraApiGetPaymentMethodReuqest>(\r\n      `${this.path}/get`,\r\n      data,\r\n      config\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Add tokenized payment method\r\n   * @param data tokenized wallet data\r\n   * @param config axios config\r\n   * @returns\r\n   */\r\n  add(data: NoraApiAddPaymentMethodRequest, config?: AxiosRequestConfig): Promise<NoraApiAddPaymentMethodResponse> {\r\n    return this.context.post<NoraApiAddPaymentMethodResponse, NoraApiAddPaymentMethodRequest>(\r\n      `${this.path}/add`,\r\n      data,\r\n      config\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Set tokenized wallet as default payment method for auto payments\r\n   * @param data auth data\r\n   * @param walletId walletId\r\n   * @param config axios config\r\n   * @returns\r\n   */\r\n  setDefaultWallet(\r\n    data: NoraApiSetDefaultWalletRequest,\r\n    walletId: number,\r\n    config?: AxiosRequestConfig\r\n  ): Promise<NoraApiSetDefaultWalletResponse> {\r\n    return this.context.post<NoraApiSetDefaultWalletResponse, NoraApiSetDefaultWalletRequest>(\r\n      `${this.path}/wallet/${walletId}/default`,\r\n      data,\r\n      config\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Delete subscriber’s stored wallet\r\n   * @param data auth data\r\n   * @param creditCardId wallet Id\r\n   * @param config AxiosConfiguration\r\n   */\r\n  deleteWallet(\r\n    data: NoraApiDeleteWalletRequest,\r\n    walletId: number,\r\n    config?: AxiosRequestConfig\r\n  ): Promise<NoraApiDeleteWalletResponse> {\r\n    return this.context.post<NoraApiDeleteWalletResponse, NoraApiDeleteWalletRequest>(\r\n      `${this.path}/wallet/${walletId}/delete`,\r\n      data,\r\n      config\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This call creates new credit card for Subscriber with given accountNumber and lastName.\r\n   * @param data Credit card info\r\n   * @param config AxiosConfiguration\r\n   * @returns Created credit card Id\r\n   */\r\n  createCreditCard(\r\n    data: NoraApiCreateCreditCardsRequest,\r\n    config?: AxiosRequestConfig\r\n  ): Promise<NoraApiCreateCreditCardsResponse> {\r\n    return this.context.post<NoraApiCreateCreditCardsResponse, NoraApiCreateCreditCardsRequest>(\r\n      `/creditcards/create`,\r\n      data,\r\n      config\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Set credit card as default payment method for auto payments\r\n   * @param data Auth info\r\n   * @param creditCardId creditCardId\r\n   * @param config AxiosConfiguration\r\n   */\r\n  setDefaultCreditCard(\r\n    data: NoraApiSetDefaultCreditCardRequest,\r\n    creditCardId: number,\r\n    config?: AxiosRequestConfig\r\n  ): Promise<NoraApiSetDefaultCreditCardResponse> {\r\n    return this.context.post<NoraApiSetDefaultCreditCardResponse, NoraApiSetDefaultCreditCardRequest>(\r\n      `${this.path}/creditcard/${creditCardId}/default`,\r\n      data,\r\n      config\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Delete subscriber’s stored credit card\r\n   * @param data auth data\r\n   * @param creditCardId credit card Id\r\n   * @param config AxiosConfiguration\r\n   */\r\n  deleteCreditCard(\r\n    data: NoraApiDeleteCreditCardRequest,\r\n    creditCardId: number,\r\n    config?: AxiosRequestConfig\r\n  ): Promise<NoraApiDeleteCreditCardResponse> {\r\n    return this.context.post<NoraApiDeleteCreditCardResponse, NoraApiDeleteCreditCardRequest>(\r\n      `${this.path}/creditcard/${creditCardId}/delete`,\r\n      data,\r\n      config\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Initiates the binding process of a TrueMoney account for a subscriber with a specified identifier.\r\n   * Returns a deeplink which a client application should provide to the subscriber in some form (like QR-code or something else).\r\n   * The deeplink redirects the subscriber to TMN application where he can accept binding.\r\n   * @param data auth data\r\n   * @param metadata redirect url additional parameters\r\n   * @param config AxiosConfiguration\r\n   */\r\n  initTrueMoney(data: NoraApiInitTrueMoneyRequest, config?: AxiosRequestConfig): Promise<NoraApiInitTrueMoneyResponse> {\r\n    return this.context.post<NoraApiInitTrueMoneyResponse, NoraApiInitTrueMoneyRequest>(\r\n      `${this.path}/wallet/true-money/init`,\r\n      data,\r\n      config\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Finishes the binding process of a TrueMoney account after the subscriber has given the necessary consent\r\n   * and auth code has been retrieved by a client application.\r\n   * @param data auth data\r\n   * @param authCode code for binding true money\r\n   * @param config AxiosConfiguration\r\n   */\r\n  bindTrueMoney(data: NoraApiBindTrueMoneyRequest, config?: AxiosRequestConfig): Promise<NoraApiBindTrueMoneyResponse> {\r\n    return this.context.post<NoraApiBindTrueMoneyResponse, NoraApiBindTrueMoneyRequest>(\r\n      `${this.path}/wallet/true-money/bind`,\r\n      data,\r\n      config\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Check state of DCB payment method and prepare for...\r\n   * 0 - Success\r\n   * 2 - Invalid request\r\n   * 158 - True Online Subscriber lookup failed\r\n   * 162 - SMS limit reached\r\n   * 164 - circuitId/msisdn is required\r\n   */\r\n  initDCB(data: NoraApiInitDCBRequest, config?: AxiosRequestConfig): Promise<NoraApiInitDCBResponse> {\r\n    return this.context.post<NoraApiInitDCBResponse, NoraApiInitDCBRequest>( //\r\n      `${this.path}/dcb/init`,\r\n      data,\r\n      config\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Verify OTP for DCB payment methods (TrueOnline/TrueMove-H)\r\n   * Possible status codes: 0, 2, 159, 163, 165\r\n   */\r\n  verifyOtpDCB(data: NoraApiVerifyOtpDCBRequest, config?: AxiosRequestConfig): Promise<NoraApiVerifyOtpDCBResponse> {\r\n    return this.context.post<NoraApiVerifyOtpDCBResponse, NoraApiVerifyOtpDCBRequest>(\r\n      `${this.path}/dcb/verifyOtp`,\r\n      data,\r\n      config\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Verify Certificate ID (Thai ID, Passport, or Alien Number). Used for True Online Payments\r\n   * Possible status codes: 0, 2, 160, 161, 163\r\n   */\r\n  verifyCertIdDCB(\r\n    data: NoraApiVerifyCertIdDCBRequest,\r\n    config?: AxiosRequestConfig\r\n  ): Promise<NoraApiVerifyCertIdDCBResponse> {\r\n    return this.context.post<NoraApiVerifyCertIdDCBResponse, NoraApiVerifyCertIdDCBRequest>(\r\n      `${this.path}/dcb/verifyCertId`,\r\n      data,\r\n      config\r\n    );\r\n  }\r\n}\r\n","import type {\r\n  NoraAPIGetCountriesResponse,\r\n  NoraAPIGetLanguagesRequest,\r\n  NoraAPIGetLanguagesResponse,\r\n  NoraAPIGetCurrenciesRequest,\r\n  NoraAPIGetCurrenciesResponse,\r\n  NoraAPIGetCountriesRequest,\r\n} from './types/dictionaries.types';\r\nimport type { AxiosRequestConfig } from 'axios';\r\nimport type { ContextAPI } from './types';\r\n\r\nexport class DictionariesAPI {\r\n  readonly path = '/dictionaries';\r\n  readonly context: ContextAPI;\r\n\r\n  constructor(ctx: ContextAPI) {\r\n    this.context = ctx;\r\n  }\r\n\r\n  /**\r\n   * Get avaiable countries\r\n   * @param data SubscriptionsAPIGetRequest\r\n   * @param config AxiosConfig\r\n   * @returns List of available subscriptions\r\n   */\r\n  getCountries(data?: NoraAPIGetCountriesRequest, config?: AxiosRequestConfig): Promise<NoraAPIGetCountriesResponse> {\r\n    return this.context.post<NoraAPIGetCountriesResponse, NoraAPIGetCountriesRequest>(\r\n      `${this.path}/countries/get`,\r\n      data || {},\r\n      config\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get avaiable languages\r\n   * @param data SubscriptionsAPIGetRequest\r\n   * @param config AxiosConfig\r\n   * @returns List of available subscriptions\r\n   */\r\n  getLanguages(data?: NoraAPIGetLanguagesRequest, config?: AxiosRequestConfig): Promise<NoraAPIGetLanguagesResponse> {\r\n    return this.context.post<NoraAPIGetLanguagesResponse, NoraAPIGetLanguagesRequest>(\r\n      `${this.path}/languages/get`,\r\n      data || {},\r\n      config\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get avaiable currencies\r\n   * @param data SubscriptionsAPIGetRequest\r\n   * @param config AxiosConfig\r\n   * @returns List of available subscriptions\r\n   */\r\n  getCurrencies(\r\n    data?: NoraAPIGetCurrenciesRequest,\r\n    config?: AxiosRequestConfig\r\n  ): Promise<NoraAPIGetCurrenciesResponse> {\r\n    return this.context.post<NoraAPIGetCurrenciesResponse, NoraAPIGetCurrenciesRequest>(\r\n      `${this.path}/currencies/get`,\r\n      data || {},\r\n      config\r\n    );\r\n  }\r\n}\r\n","import type { AxiosRequestConfig } from 'axios';\r\nimport type { ContextAPI } from './types';\r\nimport {\r\n  NoraAPIAutopayContentRentRequest,\r\n  NoraAPIAutopayContentRentResponse,\r\n  NoraAPIGetContentRentRequest,\r\n  NoraAPIGetContentRentResponse,\r\n} from './types/content-rent.types';\r\n\r\nexport class ContentRentProlongationAPI {\r\n  readonly path = '/content-rent-prolongations';\r\n  readonly context: ContextAPI;\r\n\r\n  constructor(ctx: ContextAPI) {\r\n    this.context = ctx;\r\n  }\r\n\r\n  /**\r\n   * Get content allowed for auto payments.\r\n   * @param data NoraAPIGetContentRentRequest\r\n   * @param config AxiosConfig\r\n   * @returns List of available subscriptions\r\n   */\r\n  get(data?: NoraAPIGetContentRentRequest, config?: AxiosRequestConfig): Promise<NoraAPIGetContentRentResponse> {\r\n    return this.context.post<NoraAPIGetContentRentResponse, NoraAPIGetContentRentRequest>(\r\n      `${this.path}/get`,\r\n      data,\r\n      config\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get all available subscriptions with addons combined by subscription plans.\r\n   * @param data\r\n   * @param config\r\n   */\r\n  toggleAutopay(\r\n    data?: NoraAPIAutopayContentRentRequest,\r\n    config?: AxiosRequestConfig\r\n  ): Promise<NoraAPIAutopayContentRentResponse> {\r\n    return this.context.post<NoraAPIAutopayContentRentResponse, NoraAPIAutopayContentRentRequest>(\r\n      `${this.path}/autopay`,\r\n      data,\r\n      config\r\n    );\r\n  }\r\n}\r\n","import { AxiosRequestConfig } from 'axios';\r\nimport { ContextAPI } from './types';\r\nimport {\r\n  NoraAPIGetItemPaidContentRequest,\r\n  NoraAPIGetItemPaidContentResponse,\r\n  NoraAPIGetPaidContentRequest,\r\n  NoraAPIGetPaidContentResponse,\r\n} from './types/paid-content.types';\r\n\r\nexport class PaidContentAPI {\r\n  readonly path = '/content';\r\n  readonly context: ContextAPI;\r\n\r\n  constructor(ctx: ContextAPI) {\r\n    this.context = ctx;\r\n  }\r\n\r\n  withUrlVersion(config: AxiosRequestConfig | undefined, version = 'v3'): AxiosRequestConfig {\r\n    return {\r\n      ...(config || {}),\r\n      // baseURL: (config?.baseURL || this.context.config.baseURL).replace('/v2', `/${version}`),\r\n      baseURL: (config?.baseURL || this.context.config.baseURL)\r\n        .replace(/\\/v2$/, `/${version}`)\r\n        .replace(/\\/v2\\//, `/${version}/`),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * This method returns paid content for further purchase.\r\n   * Can be filtered by geo block and already purchased content if subscriber's account number and last name is send in the auth request.\r\n   * @param data NoraAPIGetPaidContentRequest\r\n   * @param config AxiosRequestConfig\r\n   * @returns List of available content\r\n   */\r\n  get(data?: NoraAPIGetPaidContentRequest, config?: AxiosRequestConfig): Promise<NoraAPIGetPaidContentResponse> {\r\n    return this.context.post<NoraAPIGetPaidContentResponse, NoraAPIGetPaidContentRequest>(\r\n      `${this.path}/get`,\r\n      data,\r\n      this.withUrlVersion(config)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method returns paid content item for further purchase.\r\n   * Can be filtered by geo block and already purchased content if subscriber's account number and last name is send in the auth request.\r\n   * @param data NoraAPIGetItemPaidContentRequest\r\n   * @param config AxiosRequestConfig\r\n   * @returns List of available content\r\n   */\r\n  getItem(\r\n    data?: NoraAPIGetItemPaidContentRequest,\r\n    config?: AxiosRequestConfig\r\n  ): Promise<NoraAPIGetItemPaidContentResponse> {\r\n    return this.context.post<NoraAPIGetItemPaidContentResponse, NoraAPIGetItemPaidContentRequest>(\r\n      `${this.path}/item/get`,\r\n      data,\r\n      this.withUrlVersion(config)\r\n    );\r\n  }\r\n}\r\n","import { SubscriptionsAPI } from './subscriptions';\r\nimport { PaymentsAPI } from './payments';\r\nimport * as configuration from '../configure';\r\nimport { SubscribersAPI } from './subscribers';\r\nimport { client } from './../client';\r\n\r\nimport type { APIConfig, ContextAPI } from './types';\r\nimport type { AxiosInstance, AxiosResponse } from 'axios';\r\nimport { NoraApiError } from '../errors/nora-api.error';\r\nimport { PaymentSystemsAPI } from './payment-systems';\r\nimport { PaymentMethodsAPI } from './payment-methods';\r\nimport { DictionariesAPI } from './dictionaries';\r\nimport { ContentRentProlongationAPI } from './content-rent';\r\nimport { PaidContentAPI } from './paid-content';\r\n\r\nconst {\r\n  defaultOptions: { token, login, baseURL },\r\n} = configuration;\r\n\r\nexport class NoraAPI implements ContextAPI {\r\n  readonly config: APIConfig;\r\n  readonly logger: unknown;\r\n\r\n  // resources\r\n  readonly subscribers: SubscribersAPI;\r\n  readonly payments: PaymentsAPI;\r\n  readonly subscriptions: SubscriptionsAPI;\r\n  readonly paymentSystems: PaymentSystemsAPI;\r\n  readonly paymentMethods: PaymentMethodsAPI;\r\n  readonly dictionaries: DictionariesAPI;\r\n  readonly contentRent: ContentRentProlongationAPI;\r\n  readonly paidContent: PaidContentAPI;\r\n\r\n  constructor(cfg?: APIConfig) {\r\n    // resolve config\r\n    this.config = {\r\n      baseURL: cfg?.baseURL || baseURL,\r\n      token: cfg?.token || token,\r\n      login: cfg?.login || login,\r\n    };\r\n\r\n    const tokenConfig = this.config.token;\r\n    const loginConfig = this.config.login;\r\n    client.interceptors.request.use(function (cfg) {\r\n      // Mixin token to auth data\r\n      if (Object.prototype.hasOwnProperty.call(cfg, 'data')) {\r\n        const { data } = cfg;\r\n        cfg.data = {\r\n          ...data,\r\n          auth: { token: tokenConfig, login: loginConfig, ...data.auth },\r\n        };\r\n      } else {\r\n        cfg.data = { auth: { token: tokenConfig, login: loginConfig } };\r\n      }\r\n      return cfg;\r\n    });\r\n\r\n    this.subscribers = new SubscribersAPI(this);\r\n    this.payments = new PaymentsAPI(this);\r\n    this.subscriptions = new SubscriptionsAPI(this);\r\n    this.paymentSystems = new PaymentSystemsAPI(this);\r\n    this.paymentMethods = new PaymentMethodsAPI(this);\r\n    this.dictionaries = new DictionariesAPI(this);\r\n    this.contentRent = new ContentRentProlongationAPI(this);\r\n    this.paidContent = new PaidContentAPI(this);\r\n  }\r\n\r\n  send(): AxiosInstance {\r\n    // TODO: may be support multiple clients\r\n    /* const { token, login } = this.config;\r\n    client.interceptors.request.use(function (cfg) {\r\n      // Mixin token to auth data\r\n      if (Object.prototype.hasOwnProperty.call(cfg, 'data')) {\r\n        const { data } = cfg;\r\n        cfg.data = {\r\n          ...data,\r\n          auth: { token, login, ...data.auth },\r\n        };\r\n      } else {\r\n        cfg.data = { auth: { token, login } };\r\n      }\r\n      return cfg;\r\n    }); */\r\n\r\n    return client;\r\n  }\r\n\r\n  async post<R = any, D = any>(url: string, data?: D, config?: any): Promise<R> {\r\n    try {\r\n      const baseUrl = config ? config?.baseURL : null;\r\n      const result = await this.send().post<unknown, AxiosResponse<R>, D>(\r\n        `${baseUrl || this.config.baseURL}${url}`,\r\n        data,\r\n        config\r\n      );\r\n      return result?.data;\r\n    } catch (error: any) {\r\n      // TODO: format errors remove AxiosError\r\n      throw new NoraApiError(error);\r\n    }\r\n  }\r\n\r\n  async get<R = any, D = any>(url: string, config?: any): Promise<R> {\r\n    try {\r\n      const baseUrl = config ? config?.baseURL : null;\r\n      const result = await this.send().get<unknown, AxiosResponse<R>, D>(\r\n        `${baseUrl || this.config.baseURL}${url}`,\r\n        config\r\n      );\r\n      return result?.data;\r\n    } catch (error: any) {\r\n      // TODO: format errors remove AxiosError\r\n      throw new NoraApiError(error);\r\n    }\r\n  }\r\n}\r\n","export enum PaymentSystemTypes {\r\n  AUTHORIZE_NET = 'AUTHORIZE_NET',\r\n  GR4VY_GATEWAY = 'GR4VY_GATEWAY',\r\n  CASH = 'CASH',\r\n  CHECK = 'CHECK',\r\n  NEWEBPAY = 'NEWEBPAY',\r\n  PAYPAL = 'PAYPAL',\r\n  TELR = 'TELR',\r\n  EXTERNAL_PAYMENTS = 'EXTERNAL_PAYMENTS',\r\n  CCPP = 'CCPP',\r\n  TRUE_MONEY = 'TRUE_MONEY',\r\n  TOL = 'TOL',\r\n  TRUE_ONLINE = 'TRUE_ONLINE',\r\n  TRUE_MOVE_H = 'TRUE_MOVE_H',\r\n}\r\n\r\nexport enum ExternalPaymentSystemTypes {\r\n  AUTHORIZE_NET_MANUAL = 'AUTHORIZE_NET_MANUAL',\r\n  WESTERN_UNION = 'WESTERN_UNION',\r\n  MONEY_GRAM = 'MONEY_GRAM',\r\n  PAYPAL_EXPRESS = 'PAYPAL_EXPRESS',\r\n}\r\n\r\nexport enum AddOnType {\r\n  RENT = 'RENT',\r\n  PURCHASE = 'PURCHASE',\r\n}\r\n\r\nexport enum SubscriberPaymentStatuses {\r\n  ACTIVE = 'ACTIVE',\r\n  EXPIRED = 'EXPIRED',\r\n  VOIDED = 'VOIDED',\r\n  OVERRIDDEN = 'OVERRIDDEN',\r\n  SKIPPED = 'SKIPPED',\r\n  ON_HOLD = 'ON_HOLD',\r\n  PENDING = 'PENDING',\r\n}\r\n\r\nexport enum SubscriptionStatus {\r\n  PENDING = 'PENDING',\r\n  TOA_PENDING = 'TOA_PENDING',\r\n  ACTIVE = 'ACTIVE',\r\n  UPCOMING = 'UPCOMING',\r\n  CANCELLED = 'CANCELLED',\r\n  VOIDED = 'VOIDED',\r\n  EXPIRED = 'EXPIRED',\r\n}\r\n\r\nexport enum SubscriptionReason {\r\n  OVERRIDDEN = 'Overridden',\r\n  SKIPPED = 'Skipped',\r\n}\r\n\r\nexport enum PeriodTimeUnits {\r\n  DAY = 'DAY',\r\n  MONTH = 'MONTH',\r\n  YEAR = 'YEAR',\r\n}\r\n\r\nexport enum AccessoryTypes {\r\n  BOX = 'BOX',\r\n  FEE = 'FEE',\r\n  SHIPPING = 'SHIPPING',\r\n  EQUIPMENT = 'EQUIPMENT',\r\n}\r\n\r\nexport enum SubscriptionPlatforms {\r\n  STB = 'STB',\r\n  PC = 'PC',\r\n  IOS = 'iOS',\r\n  ANDROID = 'Android',\r\n  SAMSUNGTV = 'SamsungTV',\r\n  OTHERS = 'Others',\r\n  LG = 'LG',\r\n  WEB = 'WEB',\r\n}\r\n\r\nexport enum SubscriberSubscriptionType {\r\n  PAID = 'PAID',\r\n  FREEMIUM = 'FREEMIUM',\r\n}\r\n\r\nexport enum PartnerProviders {\r\n  iQIYI = 'iQIYI',\r\n}\r\n\r\nexport enum SubscriberOperatorsType {\r\n  'ACES' = 'ACES',\r\n  'AIS' = 'AIS',\r\n  'CATCDMA' = 'CATCDMA',\r\n  'AWN' = 'AWN',\r\n  'DPC' = 'DPC',\r\n  'DTAC' = 'DTAC',\r\n  'RTF3G' = 'RTF3G',\r\n  'TOT3G' = 'TOT3G',\r\n  'DTN' = 'DTN',\r\n  'TMV' = 'TMV',\r\n}\r\n\r\nexport enum PaymentSystem2C2PStatusOfThePurchase {\r\n  CANCELLED = 'CANCELLED',\r\n  PAID = 'PAID',\r\n  PAYMENT_FAILED = 'PAYMENT_FAILED',\r\n  PENDING_PAYMENT = 'PENDING_PAYMENT',\r\n  VOID = 'VOID',\r\n  REFUNDED = 'REFUNDED',\r\n}\r\n"],"names":["SubscriptionsAPI","path","context","constructor","ctx","this","get","data","config","post","getPlans","PaymentsAPI","payReSubscription","paySubscription","calculate","calculateContentSets","payContentSets","payAdditions","calculateAdditions","userAgent","process","version","arch","defaultOptions","mode","env","SETPLEX_API_MODE","baseURL","SETPLEX_API_BASE_URL","token","SETPLEX_API_TOKEN","login","SETPLEX_API_LOGIN","headers","SubscribersAPI","getByEmail","info","update","getSubscriptionContentSets","getSubscription","unassignDevice","deviceSerialNumber","cancelSubscription","autoPaySubscription","getSubscriptionPartnerProducts","validateUsername","search","getToa","acceptToa","configuration","client","axios","create","NoraApiError","Error","response","status","message","Object","prototype","hasOwnProperty","call","name","super","AxiosError","captureStackTrace","PaymentSystemsAPI","getAvailable","getOptions","addFlow","checkResult","PaymentMethodsAPI","add","setDefaultWallet","walletId","deleteWallet","createCreditCard","setDefaultCreditCard","creditCardId","deleteCreditCard","initTrueMoney","bindTrueMoney","initDCB","verifyOtpDCB","verifyCertIdDCB","DictionariesAPI","getCountries","getLanguages","getCurrencies","ContentRentProlongationAPI","toggleAutopay","PaidContentAPI","withUrlVersion","replace","getItem","PaymentSystemTypes","ExternalPaymentSystemTypes","AddOnType","SubscriberPaymentStatuses","SubscriptionStatus","SubscriptionReason","PeriodTimeUnits","AccessoryTypes","SubscriptionPlatforms","SubscriberSubscriptionType","PartnerProviders","SubscriberOperatorsType","PaymentSystem2C2PStatusOfThePurchase","NoraAPIPaymentSystems","NoraAPIExternalPaymentSystemTypes","NoraAPIAddOnType","NoraAPISubscriberPaymentStatuses","NoraAPIAccessoryTypes","PaymentSystem2C2PPurchaseStatuses","logger","subscribers","payments","subscriptions","paymentSystems","paymentMethods","dictionaries","contentRent","paidContent","cfg","tokenConfig","loginConfig","interceptors","request","use","auth","send","async","url","baseUrl","error"],"mappings":"2HASaA,EACFC,KAAO,iBACPC,QAETC,YAAYC,GACVC,KAAKH,QAAUE,CAChB,CAQDE,IAAIC,EAAuCC,GACzC,OAAOH,KAAKH,QAAQO,KAClB,GAAGJ,KAAKJ,WACRM,GAAQ,CAAE,EACVC,EAEH,CAODE,SACEH,EACAC,GAEA,OAAOH,KAAKH,QAAQO,KAClB,GAAGJ,KAAKJ,iBACRM,GAAQ,CAAE,EACVC,EAEH,QC1BUG,EACFV,KAAO,YACPC,QAETC,YAAYC,GACVC,KAAKH,QAAUE,CAChB,CAMDQ,kBAAkBL,EAA4BC,GAC5C,OAAOH,KAAKH,QAAQO,KAAkD,GAAGJ,KAAKJ,UAAWM,EAAMC,EAChG,CAODK,gBAAgBN,EAAkCC,GAChD,OAAOH,KAAKH,QAAQO,KAClB,GAAGJ,KAAKJ,gBACRM,EACAC,EAEH,CAQDM,UAAUP,EAAmCC,GAC3C,OAAOH,KAAKH,QAAQO,KAClB,GAAGJ,KAAKJ,iBACRM,EACAC,EAEH,CAQDO,qBACER,EACAC,GAEA,OAAOH,KAAKH,QAAQO,KAClB,GAAGJ,KAAKJ,8BACRM,EACAC,EAEH,CAQDQ,eACET,EACAC,GAEA,OAAOH,KAAKH,QAAQO,KAClB,GAAGJ,KAAKJ,uBACRM,EACAC,EAEH,CAODS,aAAaV,EAAsCC,GACjD,OAAOH,KAAKH,QAAQO,KAClB,GAAGJ,KAAKJ,oBACRM,EACAC,EAEH,CAODU,mBAAmBX,EAA4CC,GAC7D,OAAOH,KAAKH,QAAQO,KAClB,GAAGJ,KAAKJ,2BACRM,EACAC,EAEH,ECvHH,MACaW,EACX,6CAAyDC,QAAQC,QAAU,IAAMD,QAAQE,KAAO,IAErFC,EAAiB,CAC5BC,KAAMJ,QAAQK,IAAIC,kBAAoB,GACtCC,QAASP,QAAQK,IAAIG,sBAAwB,GAC7CC,MAAOT,QAAQK,IAAIK,mBAAqB,GACxCC,MAAOX,QAAQK,IAAIO,mBAAqB,GACxCC,QAAS,CACP,aAAcd,6ECiBLe,EACFjC,KAAO,eACPC,QAETC,YAAYC,GACVC,KAAKH,QAAUE,CAChB,CAQDE,IAAIC,EAAmCC,GACrC,OAAOH,KAAKH,QAAQO,KAClB,GAAGJ,KAAKJ,WACRM,EACAC,EAEH,CASD2B,WACE5B,EACAC,GAEA,OAAOH,KAAKH,QAAQO,KAClB,GAAGJ,KAAKJ,cACRM,EACAC,EAEH,CAQD4B,KAAK7B,EAAuCC,GAC1C,OAAOH,KAAKH,QAAQO,KAClB,GAAGJ,KAAKJ,YACRM,EACAC,EAEH,CASD6B,OACE9B,EACAC,GAEA,OAAOH,KAAKH,QAAQO,KAClB,GAAGJ,KAAKJ,cACRM,EACAC,EAEH,CAOD8B,2BACE/B,EACAC,GAEA,OAAOH,KAAKH,QAAQO,KAGlB,GAAGJ,KAAKJ,qCAAsCM,EAAMC,EACvD,CAQD+B,gBACEhC,EACAC,GAEA,OAAOH,KAAKH,QAAQO,KAClB,GAAGJ,KAAKJ,wBACRM,EACAC,EAEH,CAQDgC,eACEjC,EACAkC,EACAjC,GAEA,OAAOH,KAAKH,QAAQO,KAClB,GAAGJ,KAAKJ,gBAAgBwC,aACxBlC,EACAC,EAEH,CAQDkC,mBACEnC,EACAC,GAEA,OAAOH,KAAKH,QAAQO,KAClB,GAAGJ,KAAKJ,2BACRM,EACAC,EAEH,CAODmC,oBACEpC,EACAC,GAEA,OAAOH,KAAKH,QAAQO,KAClB,GAAGJ,KAAKJ,4BACRM,EACAC,EAEH,CAQDoC,+BACErC,EACAC,GAEA,OAAOH,KAAKH,QAAQO,KAGlB,GAAGJ,KAAKJ,yCAA0CM,EAAMC,EAC3D,CAODqC,iBACEtC,EACAC,GAEA,OAAOH,KAAKH,QAAQO,KAClB,GAAGJ,KAAKJ,yBACRM,EACAC,EAEH,CASDsC,OACEvC,EACAC,GAEA,OAAOH,KAAKH,QAAQO,KAClB,GAAGJ,KAAKJ,cACRM,EACAC,EAEH,CAEDuC,OAAOxC,EAAsCC,GAC3C,OAAOH,KAAKH,QAAQO,KAClB,GAAGJ,KAAKJ,eACRM,EACAC,EAEH,CAEDwC,UACEzC,EACAC,GAEA,OAAOH,KAAKH,QAAQO,KAClB,GAAGJ,KAAKJ,kBACRM,EACAC,EAEH,ECvPH,MACEe,gBAAgBU,QAAEA,IAChBgB,EAESC,EAASC,EAAMC,OAAO,CACjCnB,QAAS,IACJA,KCPD,MAAOoB,UAAqBC,MAChCC,SAAW,CACTC,OAAQ,GAGVrD,YAAYsD,GAQV,GAPIC,OAAOC,UAAUC,eAAeC,KAAKJ,EAAS,UAASA,EAAQK,KAAO,IAE1EC,MAAMN,GAGNpD,KAAKyD,KAAO,eAERL,aAAmBO,EAAAA,WAAY,CACjC,MAAMT,SAAEA,GAAaE,EACjBF,IACFlD,KAAKkD,SAASC,OAASD,EAASC,OAEnC,CAEDF,MAAMW,kBAAkB5D,KAAMA,KAAKF,YACpC,QCVU+D,EACFjE,KAAO,gBACPC,QAETC,YAAYC,GACVC,KAAKH,QAAUE,CAChB,CAUD+D,aACE5D,EACAC,GAEA,OAAOH,KAAKH,QAAQO,KAClB,GAAGJ,KAAKJ,uBACRM,EACAC,EAEH,CAQD4D,WACE7D,EACAC,GAEA,OAAOH,KAAKH,QAAQO,KAClB,GAAGJ,KAAKJ,eACRM,EACAC,EAEH,CAOD6D,QACE9D,EACAC,GAEA,OAAOH,KAAKH,QAAQO,KAClB,GAAGJ,KAAKJ,wBACRM,EACAC,EAEH,CAOD8D,YACE/D,EACAC,GAEA,OAAOH,KAAKH,QAAQO,KAClB,GAAGJ,KAAKJ,aACRM,EACAC,EAEH,QC1DU+D,EACFtE,KAAO,kBACPC,QAETC,YAAYC,GACVC,KAAKH,QAAUE,CAChB,CAODE,IAAIC,EAAsCC,GACxC,OAAOH,KAAKH,QAAQO,KAClB,GAAGJ,KAAKJ,WACRM,EACAC,EAEH,CAQDgE,IAAIjE,EAAsCC,GACxC,OAAOH,KAAKH,QAAQO,KAClB,GAAGJ,KAAKJ,WACRM,EACAC,EAEH,CASDiE,iBACElE,EACAmE,EACAlE,GAEA,OAAOH,KAAKH,QAAQO,KAClB,GAAGJ,KAAKJ,eAAeyE,YACvBnE,EACAC,EAEH,CAQDmE,aACEpE,EACAmE,EACAlE,GAEA,OAAOH,KAAKH,QAAQO,KAClB,GAAGJ,KAAKJ,eAAeyE,WACvBnE,EACAC,EAEH,CAQDoE,iBACErE,EACAC,GAEA,OAAOH,KAAKH,QAAQO,KAClB,sBACAF,EACAC,EAEH,CAQDqE,qBACEtE,EACAuE,EACAtE,GAEA,OAAOH,KAAKH,QAAQO,KAClB,GAAGJ,KAAKJ,mBAAmB6E,YAC3BvE,EACAC,EAEH,CAQDuE,iBACExE,EACAuE,EACAtE,GAEA,OAAOH,KAAKH,QAAQO,KAClB,GAAGJ,KAAKJ,mBAAmB6E,WAC3BvE,EACAC,EAEH,CAUDwE,cAAczE,EAAmCC,GAC/C,OAAOH,KAAKH,QAAQO,KAClB,GAAGJ,KAAKJ,8BACRM,EACAC,EAEH,CASDyE,cAAc1E,EAAmCC,GAC/C,OAAOH,KAAKH,QAAQO,KAClB,GAAGJ,KAAKJ,8BACRM,EACAC,EAEH,CAUD0E,QAAQ3E,EAA6BC,GACnC,OAAOH,KAAKH,QAAQO,KAClB,GAAGJ,KAAKJ,gBACRM,EACAC,EAEH,CAMD2E,aAAa5E,EAAkCC,GAC7C,OAAOH,KAAKH,QAAQO,KAClB,GAAGJ,KAAKJ,qBACRM,EACAC,EAEH,CAMD4E,gBACE7E,EACAC,GAEA,OAAOH,KAAKH,QAAQO,KAClB,GAAGJ,KAAKJ,wBACRM,EACAC,EAEH,QCvNU6E,EACFpF,KAAO,gBACPC,QAETC,YAAYC,GACVC,KAAKH,QAAUE,CAChB,CAQDkF,aAAa/E,EAAmCC,GAC9C,OAAOH,KAAKH,QAAQO,KAClB,GAAGJ,KAAKJ,qBACRM,GAAQ,CAAE,EACVC,EAEH,CAQD+E,aAAahF,EAAmCC,GAC9C,OAAOH,KAAKH,QAAQO,KAClB,GAAGJ,KAAKJ,qBACRM,GAAQ,CAAE,EACVC,EAEH,CAQDgF,cACEjF,EACAC,GAEA,OAAOH,KAAKH,QAAQO,KAClB,GAAGJ,KAAKJ,sBACRM,GAAQ,CAAE,EACVC,EAEH,QCrDUiF,EACFxF,KAAO,8BACPC,QAETC,YAAYC,GACVC,KAAKH,QAAUE,CAChB,CAQDE,IAAIC,EAAqCC,GACvC,OAAOH,KAAKH,QAAQO,KAClB,GAAGJ,KAAKJ,WACRM,EACAC,EAEH,CAODkF,cACEnF,EACAC,GAEA,OAAOH,KAAKH,QAAQO,KAClB,GAAGJ,KAAKJ,eACRM,EACAC,EAEH,QCpCUmF,EACF1F,KAAO,WACPC,QAETC,YAAYC,GACVC,KAAKH,QAAUE,CAChB,CAEDwF,eAAepF,EAAwCa,EAAU,MAC/D,MAAO,IACDb,GAAU,CAAA,EAEdmB,SAAUnB,GAAQmB,SAAWtB,KAAKH,QAAQM,OAAOmB,SAC9CkE,QAAQ,QAAS,IAAIxE,KACrBwE,QAAQ,SAAU,IAAIxE,MAE5B,CASDf,IAAIC,EAAqCC,GACvC,OAAOH,KAAKH,QAAQO,KAClB,GAAGJ,KAAKJ,WACRM,EACAF,KAAKuF,eAAepF,GAEvB,CASDsF,QACEvF,EACAC,GAEA,OAAOH,KAAKH,QAAQO,KAClB,GAAGJ,KAAKJ,gBACRM,EACAF,KAAKuF,eAAepF,GAEvB,EC3CH,MACEe,gBAAgBM,MAAEA,EAAKE,MAAEA,EAAKJ,QAAEA,IAC9BsB,ECjBJ,IAAY8C,EAgBAC,EAOAC,EAKAC,EAUAC,EAUAC,EAKAC,EAMAC,EAOAC,EAWAC,EAKAC,EAIAC,EAaAC,EAnGAZ,QAcXa,2BAAA,GAdWb,EAAAA,gCAAAA,QAAAA,sBAcX,CAAA,IAbC,cAAA,gBACAA,EAAA,cAAA,gBACAA,EAAA,KAAA,OACAA,EAAA,MAAA,QACAA,EAAA,SAAA,WACAA,EAAA,OAAA,SACAA,EAAA,KAAA,OACAA,EAAA,kBAAA,oBACAA,EAAA,KAAA,OACAA,EAAA,WAAA,aACAA,EAAA,IAAA,MACAA,EAAA,YAAA,cACAA,EAAA,YAAA,cAGUC,QAKXa,uCAAA,GALWb,EAAAA,4CAAAA,QAAAA,kCAKX,CAAA,IAJC,qBAAA,uBACAA,EAAA,cAAA,gBACAA,EAAA,WAAA,aACAA,EAAA,eAAA,iBAGUC,QAGXa,sBAAA,GAHWb,EAAAA,2BAAAA,QAAAA,iBAGX,CAAA,IAFC,KAAA,OACAA,EAAA,SAAA,WAGUC,QAQXa,sCAAA,GARWb,EAAAA,2CAAAA,QAAAA,iCAQX,CAAA,IAPC,OAAA,SACAA,EAAA,QAAA,UACAA,EAAA,OAAA,SACAA,EAAA,WAAA,aACAA,EAAA,QAAA,UACAA,EAAA,QAAA,UACAA,EAAA,QAAA,UAGF,SAAYC,GACVA,EAAA,QAAA,UACAA,EAAA,YAAA,cACAA,EAAA,OAAA,SACAA,EAAA,SAAA,WACAA,EAAA,UAAA,YACAA,EAAA,OAAA,SACAA,EAAA,QAAA,SACD,CARD,CAAYA,IAAAA,EAQX,CAAA,IAED,SAAYC,GACVA,EAAA,WAAA,aACAA,EAAA,QAAA,SACD,CAHD,CAAYA,IAAAA,EAGX,CAAA,IAED,SAAYC,GACVA,EAAA,IAAA,MACAA,EAAA,MAAA,QACAA,EAAA,KAAA,MACD,CAJD,CAAYA,IAAAA,EAIX,CAAA,IAEWC,QAKXU,2BAAA,GALWV,EAAAA,gCAAAA,QAAAA,sBAKX,CAAA,IAJC,IAAA,MACAA,EAAA,IAAA,MACAA,EAAA,SAAA,WACAA,EAAA,UAAA,YAGF,SAAYC,GACVA,EAAA,IAAA,MACAA,EAAA,GAAA,KACAA,EAAA,IAAA,MACAA,EAAA,QAAA,UACAA,EAAA,UAAA,YACAA,EAAA,OAAA,SACAA,EAAA,GAAA,KACAA,EAAA,IAAA,KACD,CATD,CAAYA,IAAAA,EASX,CAAA,IAED,SAAYC,GACVA,EAAA,KAAA,OACAA,EAAA,SAAA,UACD,CAHD,CAAYA,IAAAA,EAGX,CAAA,IAED,SAAYC,GACVA,EAAA,MAAA,OACD,CAFD,CAAYA,IAAAA,EAEX,CAAA,IAED,SAAYC,GACVA,EAAA,KAAA,OACAA,EAAA,IAAA,MACAA,EAAA,QAAA,UACAA,EAAA,IAAA,MACAA,EAAA,IAAA,MACAA,EAAA,KAAA,OACAA,EAAA,MAAA,QACAA,EAAA,MAAA,QACAA,EAAA,IAAA,MACAA,EAAA,IAAA,KACD,CAXD,CAAYA,IAAAA,EAWX,CAAA,IAEWC,QAOXM,uCAAA,GAPWN,EAAAA,QAAoCM,oCAApCN,0CAOX,CAAA,IANC,UAAA,YACAA,EAAA,KAAA,OACAA,EAAA,eAAA,iBACAA,EAAA,gBAAA,kBACAA,EAAA,KAAA,OACAA,EAAA,SAAA,iCDrFSnG,OACA0G,OAGAC,YACAC,SACAC,cACAC,eACAC,eACAC,aACAC,YACAC,YAETvH,YAAYwH,GAEVtH,KAAKG,OAAS,CACZmB,QAASgG,GAAKhG,SAAWA,EACzBE,MAAO8F,GAAK9F,OAASA,EACrBE,MAAO4F,GAAK5F,OAASA,GAGvB,MAAM6F,EAAcvH,KAAKG,OAAOqB,MAC1BgG,EAAcxH,KAAKG,OAAOuB,MAChCmB,EAAO4E,aAAaC,QAAQC,KAAI,SAAUL,GAExC,GAAIjE,OAAOC,UAAUC,eAAeC,KAAK8D,EAAK,QAAS,CACrD,MAAMpH,KAAEA,GAASoH,EACjBA,EAAIpH,KAAO,IACNA,EACH0H,KAAM,CAAEpG,MAAO+F,EAAa7F,MAAO8F,KAAgBtH,EAAK0H,MAE3D,MACCN,EAAIpH,KAAO,CAAE0H,KAAM,CAAEpG,MAAO+F,EAAa7F,MAAO8F,IAElD,OAAOF,CACT,IAEAtH,KAAK8G,YAAc,IAAIjF,EAAe7B,MACtCA,KAAK+G,SAAW,IAAIzG,EAAYN,MAChCA,KAAKgH,cAAgB,IAAIrH,EAAiBK,MAC1CA,KAAKiH,eAAiB,IAAIpD,EAAkB7D,MAC5CA,KAAKkH,eAAiB,IAAIhD,EAAkBlE,MAC5CA,KAAKmH,aAAe,IAAInC,EAAgBhF,MACxCA,KAAKoH,YAAc,IAAIhC,EAA2BpF,MAClDA,KAAKqH,YAAc,IAAI/B,EAAetF,KACvC,CAED6H,OAiBE,OAAOhF,CACR,CAEDiF,WAA6BC,EAAa7H,EAAUC,GAClD,IACE,MAAM6H,EAAU7H,EAASA,GAAQmB,QAAU,KAM3C,aALqBtB,KAAK6H,OAAOzH,KAC/B,GAAG4H,GAAWhI,KAAKG,OAAOmB,UAAUyG,IACpC7H,EACAC,KAEaD,IAIhB,CAHC,MAAO+H,GAEP,MAAM,IAAIjF,EAAaiF,EACxB,CACF,CAEDH,UAA4BC,EAAa5H,GACvC,IACE,MAAM6H,EAAU7H,EAASA,GAAQmB,QAAU,KAK3C,aAJqBtB,KAAK6H,OAAO5H,IAC/B,GAAG+H,GAAWhI,KAAKG,OAAOmB,UAAUyG,IACpC5H,KAEaD,IAIhB,CAHC,MAAO+H,GAEP,MAAM,IAAIjF,EAAaiF,EACxB,CACF"}