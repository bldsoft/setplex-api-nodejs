{"version":3,"file":"index.cjs","sources":["../../src/resource/subscriptions.ts","../../src/resource/payments.ts","../../src/configure/index.ts","../../src/resource/subscribers.ts","../../src/client/index.ts","../../src/errors/nora-api.error.ts","../../src/resource/payment-systems.ts","../../src/resource/payment-methods.ts","../../src/resource/dictionaries.ts","../../src/resource/index.ts","../../src/resource/types/constants.ts"],"sourcesContent":["import type { AxiosRequestConfig } from 'axios';\r\nimport type { ContextAPI } from './types';\r\nimport type { NoraAPIGetSubscriptionsRequest, NoraAPIGetSubscriptionsResponse } from './types/subscriptions.types';\r\n\r\nexport class SubscriptionsAPI {\r\n  readonly path = '/subscriptions';\r\n  readonly context: ContextAPI;\r\n\r\n  constructor(ctx: ContextAPI) {\r\n    this.context = ctx;\r\n  }\r\n\r\n  /**\r\n   * Get info about available subscriptions\r\n   * @param data SubscriptionsAPIGetRequest\r\n   * @param config AxiosConfig\r\n   * @returns List of available subscriptions\r\n   */\r\n  get(data?: NoraAPIGetSubscriptionsRequest, config?: AxiosRequestConfig): Promise<NoraAPIGetSubscriptionsResponse> {\r\n    return this.context.post<NoraAPIGetSubscriptionsResponse, NoraAPIGetSubscriptionsRequest>(\r\n      `${this.path}/get`,\r\n      data || {},\r\n      config\r\n    );\r\n  }\r\n}\r\n","import type {\r\n  PaymentsAPIDoRequest,\r\n  PaymentsAPIDoResponse,\r\n  PaymentsAPIDoSingleRequest,\r\n  PaymentsAPIDoSingleResponse,\r\n  PaymentsAPICalculateRequest,\r\n  PaymentsAPICalculateResponse,\r\n  PaymentsAPICalculateContentSetsRequest,\r\n  PaymentsAPICalculateContentSetsResponse,\r\n  PaymentsAPIPayContentSetsRequest,\r\n  PaymentsAPIPayContentSetsResponse,\r\n} from './types/payments.types';\r\nimport type { AxiosRequestConfig } from 'axios';\r\nimport type { ContextAPI } from './types';\r\n\r\nexport class PaymentsAPI {\r\n  readonly path = '/payments';\r\n  readonly context: ContextAPI;\r\n\r\n  constructor(ctx: ContextAPI) {\r\n    this.context = ctx;\r\n  }\r\n  /**\r\n   * Creating payment for subscriber\r\n   * @param data Payment data\r\n   * @param config AxiosConfiguration\r\n   */\r\n  payReSubscription(data: PaymentsAPIDoRequest, config?: AxiosRequestConfig): Promise<PaymentsAPIDoResponse> {\r\n    return this.context.post<PaymentsAPIDoResponse, PaymentsAPIDoRequest>(`${this.path}/do`, data, config);\r\n  }\r\n\r\n  /**\r\n   * Creating subscriber, credit card and make payment for subscriber\r\n   * @param data Full data about subscriber, credit card and payment\r\n   * @param config AxiosConfiguration\r\n   */\r\n  paySubscription(data: PaymentsAPIDoSingleRequest, config?: AxiosRequestConfig): Promise<PaymentsAPIDoSingleResponse> {\r\n    return this.context.post<PaymentsAPIDoSingleResponse, PaymentsAPIDoSingleRequest>(\r\n      `${this.path}/doSingle`,\r\n      data,\r\n      config\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Calculates amount of subscriber's payment\r\n   * @param data Required info for calculation\r\n   * @param config AxiosConfiguration\r\n   * @returns Calculation for needed subscription\r\n   */\r\n  calculate(data: PaymentsAPICalculateRequest, config?: AxiosRequestConfig): Promise<PaymentsAPICalculateResponse> {\r\n    return this.context.post<PaymentsAPICalculateResponse, PaymentsAPICalculateRequest>(\r\n      `${this.path}/calculate`,\r\n      data,\r\n      config\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Calculate Content Set Addon Prices\r\n   * @param data Required info for calculation\r\n   * @param config AxiosConfiguration\r\n   * @returns Calculation for needed subscription\r\n   */\r\n  calculateContentSets(\r\n    data: PaymentsAPICalculateContentSetsRequest,\r\n    config?: AxiosRequestConfig\r\n  ): Promise<PaymentsAPICalculateContentSetsResponse> {\r\n    return this.context.post<PaymentsAPICalculateContentSetsResponse, PaymentsAPICalculateContentSetsRequest>(\r\n      `${this.path}/content-sets/calculate`,\r\n      data,\r\n      config\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Pay Content Set Addons\r\n   * @param data Required info for calculation\r\n   * @param config AxiosConfiguration\r\n   * @returns Calculation for needed subscription\r\n   */\r\n  payContentSets(\r\n    data: PaymentsAPIPayContentSetsRequest,\r\n    config?: AxiosRequestConfig\r\n  ): Promise<PaymentsAPIPayContentSetsResponse> {\r\n    return this.context.post<PaymentsAPIPayContentSetsResponse, PaymentsAPIPayContentSetsRequest>(\r\n      `${this.path}/content-sets/do`,\r\n      data,\r\n      config\r\n    );\r\n  }\r\n}\r\n","// import { version } from '../../package.json';\r\nconst version = '0.0.1';\r\nexport const userAgent =\r\n  'Setplex/External-API-node-SDK ' + version + ' (node ' + process.version + '-' + process.arch + ')';\r\n\r\nexport const defaultOptions = {\r\n  mode: process.env.SETPLEX_API_MODE || '', // ?\r\n  baseURL: process.env.SETPLEX_API_BASE_URL || '',\r\n  token: process.env.SETPLEX_API_TOKEN || '',\r\n  login: process.env.SETPLEX_API_LOGIN || '',\r\n  headers: {\r\n    'User-Agent': userAgent,\r\n  },\r\n};\r\n","import type {\r\n  NoraAPIGetSubscriberByEmailRequest,\r\n  NoraAPIGetSubscriberByEmailResponse,\r\n  NoraAPIGetSubscriberInfoRequest,\r\n  NoraAPIGetSubscriberRequest,\r\n  NoraAPIGetSubscriberResponse,\r\n  NoraApiSubscriberAutoPaySubscriptionRequest,\r\n  NoraApiSubscriberAutoPaySubscriptionResponse,\r\n  NoraApiSubscriberCancelSubscriptionRequest,\r\n  NoraApiSubscriberCancelSubscriptionResponse,\r\n  NoraApiSubscriberSubscriptionContentSetsRequest,\r\n  NoraApiSubscriberSubscriptionContentSetsResponse,\r\n  NoraApiSubscriberSubscriptionGetRequest,\r\n  NoraApiSubscriberSubscriptionGetResponse,\r\n  NoraApiSusbscriberUnassignDeviceRequest,\r\n  NoraApiSusbscriberUnassignDeviceResponse,\r\n  NoraAPIUpdateSubscriberInfoRequest,\r\n  NoraAPIUpdateSubscriberResponse,\r\n} from './types/subscribers.types';\r\nimport type { AxiosRequestConfig } from 'axios';\r\nimport type { ContextAPI } from './types';\r\n\r\nexport class SubscribersAPI {\r\n  readonly path = '/subscribers';\r\n  readonly context: ContextAPI;\r\n\r\n  constructor(ctx: ContextAPI) {\r\n    this.context = ctx;\r\n  }\r\n\r\n  /**\r\n   * Get subscriber by accountNumber and last name\r\n   * @param data Subscriber auth info\r\n   * @param config AxiosConfig\r\n   * @returns Subscriber detail info\r\n   */\r\n  get(data: NoraAPIGetSubscriberRequest, config?: AxiosRequestConfig): Promise<NoraAPIGetSubscriberResponse> {\r\n    return this.context.post<NoraAPIGetSubscriberResponse, NoraAPIGetSubscriberRequest>(\r\n      `${this.path}/get`,\r\n      data,\r\n      config\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get subscribers by email\r\n   * @param data Subscriber email\r\n   * @param config AxiosConfig\r\n   * @returns Subscribers detail info\r\n   */\r\n  getByEmail(\r\n    data: NoraAPIGetSubscriberByEmailRequest,\r\n    config?: AxiosRequestConfig\r\n  ): Promise<NoraAPIGetSubscriberByEmailResponse> {\r\n    return this.context.post<NoraAPIGetSubscriberByEmailResponse, NoraAPIGetSubscriberByEmailRequest>(\r\n      `${this.path}/search`,\r\n      data,\r\n      config\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get subscriber by login and password\r\n   * @param data Subscriber data info\r\n   * @param config AxiosConfig\r\n   * @returns Subscriber detail info\r\n   */\r\n  info(data: NoraAPIGetSubscriberInfoRequest, config?: AxiosRequestConfig): Promise<NoraAPIGetSubscriberResponse> {\r\n    return this.context.post<NoraAPIGetSubscriberResponse, NoraAPIGetSubscriberInfoRequest>(\r\n      `${this.path}/info`,\r\n      data,\r\n      config\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Update Subscriber\r\n   * @description This call will update subscriber\r\n   * @param data Subscriber data info\r\n   * @param config AxiosConfig\r\n   * @returns Subscriber detail info\r\n   */\r\n  update(\r\n    data: NoraAPIUpdateSubscriberInfoRequest,\r\n    config?: AxiosRequestConfig\r\n  ): Promise<NoraAPIUpdateSubscriberResponse> {\r\n    return this.context.post<NoraAPIUpdateSubscriberResponse, NoraAPIUpdateSubscriberInfoRequest>(\r\n      `${this.path}/update`,\r\n      data,\r\n      config\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Loading subscriber subscription content sets\r\n   * @param config AxiosConfig\r\n   * @returns Subscription content sets info\r\n   */\r\n  getSubscriptionContentSets(\r\n    data: NoraApiSubscriberSubscriptionContentSetsRequest,\r\n    config?: AxiosRequestConfig\r\n  ): Promise<NoraApiSubscriberSubscriptionContentSetsResponse> {\r\n    return this.context.post<\r\n      NoraApiSubscriberSubscriptionContentSetsResponse,\r\n      NoraApiSubscriberSubscriptionContentSetsRequest\r\n    >(`${this.path}/subscription/content-sets/get`, data, config);\r\n  }\r\n\r\n  /**\r\n   * Loading subscriber subscription info\r\n   * @param config AxiosConfig\r\n   * @returns Subscription content sets info\r\n   */\r\n  getSubscription(\r\n    data: NoraApiSubscriberSubscriptionGetRequest,\r\n    config?: AxiosRequestConfig\r\n  ): Promise<NoraApiSubscriberSubscriptionGetResponse> {\r\n    return this.context.post<NoraApiSubscriberSubscriptionGetResponse, NoraApiSubscriberSubscriptionGetRequest>(\r\n      `${this.path}/subscription/get`,\r\n      data,\r\n      config\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Unassign device call\r\n   * @param data auth data\r\n   * @param deviceSerialNumber Device serial number\r\n   * @param config axios config\r\n   */\r\n  unassignDevice(\r\n    data: NoraApiSusbscriberUnassignDeviceRequest,\r\n    deviceSerialNumber: string,\r\n    config?: AxiosRequestConfig\r\n  ): Promise<NoraApiSusbscriberUnassignDeviceResponse> {\r\n    return this.context.post<NoraApiSusbscriberUnassignDeviceResponse, NoraApiSusbscriberUnassignDeviceRequest>(\r\n      `${this.path}/devices/${deviceSerialNumber}/unassign`,\r\n      data,\r\n      config\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This call cancels the current subscriberâ€™s subscription. Subscriber should have only one active subscription.\r\n   * @param data auth data\r\n   * @param config axios config\r\n   * @returns\r\n   */\r\n  cancelSubscription(\r\n    data: NoraApiSubscriberCancelSubscriptionRequest,\r\n    config?: AxiosRequestConfig\r\n  ): Promise<NoraApiSubscriberCancelSubscriptionResponse> {\r\n    return this.context.post<NoraApiSubscriberCancelSubscriptionResponse, NoraApiSubscriberCancelSubscriptionRequest>(\r\n      `${this.path}/subscription/cancel`,\r\n      data,\r\n      config\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This call updates (increase or decrease) current subscriberâ€™s subscription. Subscriber should have only one active subscription.\r\n   * @param data autopay & auth data\r\n   * @param config axios config\r\n   */\r\n  autoPaySubscription(\r\n    data: NoraApiSubscriberAutoPaySubscriptionRequest,\r\n    config?: AxiosRequestConfig\r\n  ): Promise<NoraApiSubscriberAutoPaySubscriptionResponse> {\r\n    return this.context.post<NoraApiSubscriberAutoPaySubscriptionResponse, NoraApiSubscriberAutoPaySubscriptionRequest>(\r\n      `${this.path}/subscription/autopay`,\r\n      data,\r\n      config\r\n    );\r\n  }\r\n}\r\n","import axios from 'axios';\r\nimport * as configuration from './../configure';\r\n\r\nconst {\r\n  defaultOptions: { headers },\r\n} = configuration;\r\n\r\nexport const client = axios.create({\r\n  headers: {\r\n    ...headers,\r\n  },\r\n});\r\n","export class NoraApiError extends Error {\r\n  constructor(message: any) {\r\n    super(message);\r\n\r\n    this.name = this.constructor.name;\r\n\r\n    Error.captureStackTrace(this, this.constructor);\r\n  }\r\n}\r\n","import type { ContextAPI } from './types';\r\nimport type { AxiosRequestConfig } from 'axios';\r\nimport type {\r\n  NoraAPIAvailablePaymentSystemsRequest,\r\n  NoraAPIAvailablePaymentSystemsResponse,\r\n  NoraAPIPaymentSystemsAddFlowRequest,\r\n  NoraAPIPaymentSystemsAddFlowResponse,\r\n  NoraAPIPaymentSystemsCheckResultRequest,\r\n  NoraAPIPaymentSystemsCheckResultResponse,\r\n  NoraAPIPaymentSystemsOptionsRequest,\r\n  NoraAPIPaymentSystemsOptionsResponse,\r\n} from './types/payment-systems.types';\r\n\r\nexport class PaymentSystemsAPI {\r\n  readonly path = '/payment-form';\r\n  readonly context: ContextAPI;\r\n\r\n  constructor(ctx: ContextAPI) {\r\n    this.context = ctx;\r\n  }\r\n\r\n  /**\r\n   * Get available payment systems\r\n   * @description Retrieves available payment system types for displaying payment form.\r\n   * If first element in response result is GR4VY_GATEWAY - other payment systems types have to be ignored and payment\r\n   * flow for GR4VY_GATEWAY have to be used.\r\n   * @param data Full data about subscriber, credit card and payment\r\n   * @param config AxiosConfiguration\r\n   */\r\n  getAvailable(\r\n    data?: NoraAPIAvailablePaymentSystemsRequest,\r\n    config?: AxiosRequestConfig\r\n  ): Promise<NoraAPIAvailablePaymentSystemsResponse> {\r\n    return this.context.post<NoraAPIAvailablePaymentSystemsResponse, NoraAPIAvailablePaymentSystemsRequest>(\r\n      `${this.path}/payment-systems`,\r\n      data,\r\n      config\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get payment system options\r\n   * @description Retrieves payment form options (currently is used for GR4VY_GATEWAY payment system flow)\r\n   * @param data Full data about subscriber, credit card and payment\r\n   * @param config AxiosConfiguration\r\n   */\r\n  getOptions(\r\n    data?: NoraAPIPaymentSystemsOptionsRequest,\r\n    config?: AxiosRequestConfig\r\n  ): Promise<NoraAPIPaymentSystemsOptionsResponse> {\r\n    return this.context.post<NoraAPIPaymentSystemsOptionsResponse, NoraAPIPaymentSystemsOptionsRequest>(\r\n      `${this.path}/options`,\r\n      data,\r\n      config\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get payment form options to add payment method for Gr4vy gateway\r\n   * @param data Full data about subscriber, credit card and payment\r\n   * @param config AxiosConfiguration\r\n   */\r\n  addFlow(\r\n    data?: NoraAPIPaymentSystemsAddFlowRequest,\r\n    config?: AxiosRequestConfig\r\n  ): Promise<NoraAPIPaymentSystemsAddFlowResponse> {\r\n    return this.context.post<NoraAPIPaymentSystemsAddFlowResponse, NoraAPIPaymentSystemsAddFlowRequest>(\r\n      `${this.path}/options/add-flow`,\r\n      data,\r\n      config\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Check result by payment number. Used for 2C2P Payments\r\n   * @param data Full data about subscriber, invoice number from 2C2P\r\n   * @param config AxiosConfiguration\r\n   */\r\n  checkResult(\r\n    data?: NoraAPIPaymentSystemsCheckResultRequest,\r\n    config?: AxiosRequestConfig\r\n  ): Promise<NoraAPIPaymentSystemsCheckResultResponse> {\r\n    return this.context.post<NoraAPIPaymentSystemsCheckResultResponse, NoraAPIPaymentSystemsCheckResultRequest>(\r\n      `${this.path}/check`,\r\n      data,\r\n      config\r\n    );\r\n  }\r\n}\r\n","import type { AxiosRequestConfig } from 'axios';\r\nimport type { ContextAPI } from './types';\r\nimport type {\r\n  NoraApiCreateCreditCardsRequest,\r\n  NoraApiCreateCreditCardsResponse,\r\n  NoraApiDeleteCreditCardRequest,\r\n  NoraApiSetDefaultCreditCardRequest,\r\n  NoraApiSetDefaultCreditCardResponse,\r\n  NoraApiGetPaymentMethodResponse,\r\n  NoraApiGetPaymentMethodReuqest,\r\n  NoraApiSetDefaultWalletRequest,\r\n  NoraApiSetDefaultWalletResponse,\r\n  NoraApiDeleteWalletRequest,\r\n  NoraApiDeleteWalletResponse,\r\n  NoraApiDeleteCreditCardResponse,\r\n  NoraApiAddPaymentMethodRequest,\r\n  NoraApiAddPaymentMethodResponse,\r\n} from './types/payment-method.types';\r\n\r\nexport class PaymentMethodsAPI {\r\n  readonly path = '/payment-method';\r\n  readonly context: ContextAPI;\r\n\r\n  constructor(ctx: ContextAPI) {\r\n    this.context = ctx;\r\n  }\r\n\r\n  /**\r\n   * Get saved tokenized payment methods for subscriber\r\n   * @param data\r\n   * @param config\r\n   */\r\n  get(data: NoraApiGetPaymentMethodReuqest, config?: AxiosRequestConfig): Promise<NoraApiGetPaymentMethodResponse> {\r\n    return this.context.post<NoraApiGetPaymentMethodResponse, NoraApiGetPaymentMethodReuqest>(\r\n      `${this.path}/get`,\r\n      data,\r\n      config\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Add tokenized payment method\r\n   * @param data tokenized wallet data\r\n   * @param config axios config\r\n   * @returns\r\n   */\r\n  add(data: NoraApiAddPaymentMethodRequest, config?: AxiosRequestConfig): Promise<NoraApiAddPaymentMethodResponse> {\r\n    return this.context.post<NoraApiAddPaymentMethodResponse, NoraApiAddPaymentMethodRequest>(\r\n      `${this.path}/add`,\r\n      data,\r\n      config\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Set tokenized wallet as default payment method for auto payments\r\n   * @param data auth data\r\n   * @param walletId walletId\r\n   * @param config axios config\r\n   * @returns\r\n   */\r\n  setDefaultWallet(\r\n    data: NoraApiSetDefaultWalletRequest,\r\n    walletId: number,\r\n    config?: AxiosRequestConfig\r\n  ): Promise<NoraApiSetDefaultWalletResponse> {\r\n    return this.context.post<NoraApiSetDefaultWalletResponse, NoraApiSetDefaultWalletRequest>(\r\n      `${this.path}/wallet/${walletId}/default`,\r\n      data,\r\n      config\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Delete subscriberâ€™s stored wallet\r\n   * @param data auth data\r\n   * @param creditCardId wallet Id\r\n   * @param config AxiosConfiguration\r\n   */\r\n  deleteWallet(\r\n    data: NoraApiDeleteWalletRequest,\r\n    walletId: number,\r\n    config?: AxiosRequestConfig\r\n  ): Promise<NoraApiDeleteWalletResponse> {\r\n    return this.context.post<NoraApiDeleteWalletResponse, NoraApiDeleteWalletRequest>(\r\n      `${this.path}/wallet/${walletId}/delete`,\r\n      data,\r\n      config\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This call creates new credit card for Subscriber with given accountNumber and lastName.\r\n   * @param data Credit card info\r\n   * @param config AxiosConfiguration\r\n   * @returns Created credit card Id\r\n   */\r\n  createCreditCard(\r\n    data: NoraApiCreateCreditCardsRequest,\r\n    config?: AxiosRequestConfig\r\n  ): Promise<NoraApiCreateCreditCardsResponse> {\r\n    return this.context.post<NoraApiCreateCreditCardsResponse, NoraApiCreateCreditCardsRequest>(\r\n      `/creditcards/create`,\r\n      data,\r\n      config\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Set credit card as default payment method for auto payments\r\n   * @param data Auth info\r\n   * @param creditCardId creditCardId\r\n   * @param config AxiosConfiguration\r\n   */\r\n  setDefaultCreditCard(\r\n    data: NoraApiSetDefaultCreditCardRequest,\r\n    creditCardId: number,\r\n    config?: AxiosRequestConfig\r\n  ): Promise<NoraApiSetDefaultCreditCardResponse> {\r\n    return this.context.post<NoraApiSetDefaultCreditCardResponse, NoraApiSetDefaultCreditCardRequest>(\r\n      `${this.path}/creditcard/${creditCardId}/default`,\r\n      data,\r\n      config\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Delete subscriberâ€™s stored credit card\r\n   * @param data auth data\r\n   * @param creditCardId credit card Id\r\n   * @param config AxiosConfiguration\r\n   */\r\n  deleteCreditCard(\r\n    data: NoraApiDeleteCreditCardRequest,\r\n    creditCardId: number,\r\n    config?: AxiosRequestConfig\r\n  ): Promise<NoraApiDeleteCreditCardResponse> {\r\n    return this.context.post<NoraApiDeleteCreditCardResponse, NoraApiDeleteCreditCardRequest>(\r\n      `${this.path}/creditcard/${creditCardId}/delete`,\r\n      data,\r\n      config\r\n    );\r\n  }\r\n}\r\n","import type {\r\n  NoraAPIGetCountriesResponse,\r\n  NoraAPIGetLanguagesRequest,\r\n  NoraAPIGetLanguagesResponse,\r\n  NoraAPIGetCurrenciesRequest,\r\n  NoraAPIGetCurrenciesResponse,\r\n  NoraAPIGetCountriesRequest,\r\n} from './types/dictionaries.types';\r\nimport type { AxiosRequestConfig } from 'axios';\r\nimport type { ContextAPI } from './types';\r\n\r\nexport class DictionariesAPI {\r\n  readonly path = '/dictionaries';\r\n  readonly context: ContextAPI;\r\n\r\n  constructor(ctx: ContextAPI) {\r\n    this.context = ctx;\r\n  }\r\n\r\n  /**\r\n   * Get avaiable countries\r\n   * @param data SubscriptionsAPIGetRequest\r\n   * @param config AxiosConfig\r\n   * @returns List of available subscriptions\r\n   */\r\n  getCountries(data?: NoraAPIGetCountriesRequest, config?: AxiosRequestConfig): Promise<NoraAPIGetCountriesResponse> {\r\n    return this.context.post<NoraAPIGetCountriesResponse, NoraAPIGetCountriesRequest>(\r\n      `${this.path}/countries/get`,\r\n      data || {},\r\n      config\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get avaiable languages\r\n   * @param data SubscriptionsAPIGetRequest\r\n   * @param config AxiosConfig\r\n   * @returns List of available subscriptions\r\n   */\r\n  getLanguages(data?: NoraAPIGetLanguagesRequest, config?: AxiosRequestConfig): Promise<NoraAPIGetLanguagesResponse> {\r\n    return this.context.post<NoraAPIGetLanguagesResponse, NoraAPIGetLanguagesRequest>(\r\n      `${this.path}/languages/get`,\r\n      data || {},\r\n      config\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get avaiable currencies\r\n   * @param data SubscriptionsAPIGetRequest\r\n   * @param config AxiosConfig\r\n   * @returns List of available subscriptions\r\n   */\r\n  getCurrencies(\r\n    data?: NoraAPIGetCurrenciesRequest,\r\n    config?: AxiosRequestConfig\r\n  ): Promise<NoraAPIGetCurrenciesResponse> {\r\n    return this.context.post<NoraAPIGetCurrenciesResponse, NoraAPIGetCurrenciesRequest>(\r\n      `${this.path}/currencies/get`,\r\n      data || {},\r\n      config\r\n    );\r\n  }\r\n}\r\n","import { SubscriptionsAPI } from './subscriptions';\r\nimport { PaymentsAPI } from './payments';\r\nimport * as configuration from '../configure';\r\nimport { SubscribersAPI } from './subscribers';\r\nimport { client } from './../client';\r\n\r\nimport type { APIConfig, ContextAPI } from './types';\r\nimport type { AxiosInstance, AxiosResponse } from 'axios';\r\nimport { NoraApiError } from '../errors/nora-api.error';\r\nimport { PaymentSystemsAPI } from './payment-systems';\r\nimport { PaymentMethodsAPI } from './payment-methods';\r\nimport { DictionariesAPI } from './dictionaries';\r\n\r\nconst {\r\n  defaultOptions: { token, login, baseURL },\r\n} = configuration;\r\n\r\nexport class NoraAPI implements ContextAPI {\r\n  readonly config: APIConfig;\r\n  readonly logger: unknown;\r\n\r\n  // resources\r\n  readonly subscribers: SubscribersAPI;\r\n  readonly payments: PaymentsAPI;\r\n  readonly subscriptions: SubscriptionsAPI;\r\n  readonly paymentSystems: PaymentSystemsAPI;\r\n  readonly paymentMethods: PaymentMethodsAPI;\r\n  readonly dictionaries: DictionariesAPI;\r\n  constructor(cfg?: APIConfig) {\r\n    // resolve config\r\n    this.config = {\r\n      baseURL: cfg?.baseURL || baseURL,\r\n      token: cfg?.token || token,\r\n      login: cfg?.login || login,\r\n    };\r\n\r\n    this.subscribers = new SubscribersAPI(this);\r\n    this.payments = new PaymentsAPI(this);\r\n    this.subscriptions = new SubscriptionsAPI(this);\r\n    this.paymentSystems = new PaymentSystemsAPI(this);\r\n    this.paymentMethods = new PaymentMethodsAPI(this);\r\n    this.dictionaries = new DictionariesAPI(this);\r\n  }\r\n\r\n  send(): AxiosInstance {\r\n    // TODO: may be support multiple clients\r\n    const { token, login } = this.config;\r\n    client.interceptors.request.use(function (cfg) {\r\n      // Mixin token to auth data\r\n      if (Object.prototype.hasOwnProperty.call(cfg, 'data')) {\r\n        const { data } = cfg;\r\n        cfg.data = {\r\n          ...data,\r\n          auth: { token, login, ...data.auth },\r\n        };\r\n      } else {\r\n        cfg.data = { auth: { token, login } };\r\n      }\r\n      return cfg;\r\n    });\r\n\r\n    return client;\r\n  }\r\n\r\n  async post<R = any, D = any>(url: string, data?: D, config?: any): Promise<R> {\r\n    try {\r\n      const result = await this.send().post<unknown, AxiosResponse<R>, D>(`${this.config.baseURL}${url}`, data, config);\r\n      return result?.data;\r\n    } catch (error: any) {\r\n      // TODO: format errors remove AxiosError\r\n      throw new NoraApiError(error);\r\n    }\r\n  }\r\n\r\n  async get<R = any, D = any>(url: string, config?: any): Promise<R> {\r\n    try {\r\n      const result = await this.send().get<unknown, AxiosResponse<R>, D>(`${this.config.baseURL}${url}`, config);\r\n      return result?.data;\r\n    } catch (error: any) {\r\n      // TODO: format errors remove AxiosError\r\n      throw new NoraApiError(error);\r\n    }\r\n  }\r\n}\r\n","export enum PaymentSystemTypes {\r\n  AUTHORIZE_NET = 'AUTHORIZE_NET',\r\n  CASH = 'CASH',\r\n  CHECK = 'CHECK',\r\n  NEWEBPAY = 'NEWEBPAY',\r\n  PAYPAL = 'PAYPAL',\r\n  TELR = 'TELR',\r\n  EXTERNAL_PAYMENTS = 'EXTERNAL_PAYMENTS',\r\n  GR4VY_GATEWAY = 'GR4VY_GATEWAY',\r\n  CCPP = 'CCPP',\r\n}\r\n\r\nexport enum ExternalPaymentSystemTypes {\r\n  AUTHORIZE_NET_MANUAL = 'AUTHORIZE_NET_MANUAL',\r\n  WESTERN_UNION = 'WESTERN_UNION',\r\n  MONEY_GRAM = 'MONEY_GRAM',\r\n  PAYPAL_EXPRESS = 'PAYPAL_EXPRESS',\r\n}\r\n\r\nexport enum AddOnType {\r\n  RENT = 'RENT',\r\n  PURCHASE = 'PURCHASE',\r\n}\r\n\r\nexport enum SubscriberPaymentStatuses {\r\n  ACTIVE = 'ACTIVE',\r\n  EXPIRED = 'EXPIRED',\r\n  VOIDED = 'VOIDED',\r\n  OVERRIDDEN = 'OVERRIDDEN',\r\n  SKIPPED = 'SKIPPED',\r\n  ON_HOLD = 'ON_HOLD',\r\n  PENDING = 'PENDING',\r\n}\r\n\r\nexport enum SubscriptionStatus {\r\n  PENDING = 'PENDING',\r\n  TOA_PENDING = 'TOA_PENDING',\r\n  ACTIVE = 'ACTIVE',\r\n  UPCOMING = 'UPCOMING',\r\n  CANCELLED = 'CANCELLED',\r\n  VOIDED = 'VOIDED',\r\n  EXPIRED = 'EXPIRED',\r\n}\r\n\r\nexport enum SubscriptionReason {\r\n  OVERRIDDEN = 'Overridden',\r\n  SKIPPED = 'Skipped',\r\n}\r\n\r\n/**\r\n * External list of payment system type\r\n */\r\nexport enum PaymentSystems {\r\n  GR4VY_GATEWAY = 'GR4VY_GATEWAY',\r\n  AUTHORIZE_NET = 'AUTHORIZE_NET',\r\n  CASH = 'CASH',\r\n  CHECK = 'CHECK',\r\n  NEWEBPAY = 'NEWEBPAY',\r\n  PAYPAL = 'PAYPAL',\r\n  TELR = 'TELR',\r\n  EXTERNAL_PAYMENTS = 'EXTERNAL_PAYMENTS',\r\n  CCPP = 'CCPP',\r\n}\r\n\r\nexport enum PeriodTimeUnits {\r\n  DAY = 'DAY',\r\n  MONTH = 'MONTH',\r\n  YEAR = 'YEAR',\r\n}\r\n"],"names":["SubscriptionsAPI","path","context","constructor","ctx","this","get","data","config","post","PaymentsAPI","payReSubscription","paySubscription","calculate","calculateContentSets","payContentSets","userAgent","process","version","arch","defaultOptions","mode","env","SETPLEX_API_MODE","baseURL","SETPLEX_API_BASE_URL","token","SETPLEX_API_TOKEN","login","SETPLEX_API_LOGIN","headers","SubscribersAPI","getByEmail","info","update","getSubscriptionContentSets","getSubscription","unassignDevice","deviceSerialNumber","cancelSubscription","autoPaySubscription","configuration","client","axios","create","NoraApiError","Error","message","super","name","captureStackTrace","PaymentSystemsAPI","getAvailable","getOptions","addFlow","checkResult","PaymentMethodsAPI","add","setDefaultWallet","walletId","deleteWallet","createCreditCard","setDefaultCreditCard","creditCardId","deleteCreditCard","DictionariesAPI","getCountries","getLanguages","getCurrencies","PaymentSystemTypes","ExternalPaymentSystemTypes","AddOnType","SubscriberPaymentStatuses","SubscriptionStatus","SubscriptionReason","PaymentSystems","PeriodTimeUnits","NoraAPIPaymentSystemTypes","NoraAPIExternalPaymentSystemTypes","NoraAPIAddOnType","NoraAPISubscriberPaymentStatuses","NoraAPIPaymentSystems","logger","subscribers","payments","subscriptions","paymentSystems","paymentMethods","dictionaries","cfg","send","interceptors","request","use","Object","prototype","hasOwnProperty","call","auth","async","url","error"],"mappings":"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"}